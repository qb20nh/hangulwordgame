{"version":3,"sources":["src/integrity_check.js"],"names":[],"mappings":"AAEA,IAAM,EAAO,KAAQ,MAAM,AAAI,MAAM,qCAAsC,EAqD3E,SAAS,EAAkB,CAAE,EAC3B,GAAI,CArDN,AAqDO,SArDY,CAAE,EACnB,IAAM,EAAO,EAAG,IAAI,CACpB,GAAI,AAAkB,UAAjB,OAAO,EAAoB,MAAO,CAAA,EACvC,IAAM,EAAO,CAAI,CAAC,OAAO,QAAQ,CAAC,CAClC,GAAI,AAA6B,mDAA7B,EAAK,QAAQ,CAAC,IAAI,CAAC,GAA4D,MAAO,CAAA,EAC1F,IAAK,IAAM,KAAK,EACdlCY,MAAO,CAAA,EAoCzB,OAAO,EAAK,QAAQ,CAAC,IAAI,CAAC,KAAQ,CAAC,SAAS,EAAE,EAAG,IAAI,CAAC,oBAAoB,CAAC,AAC7E,EAUgB,GAAK,MAAM,AAAI,MAAM,CAAC,SAAS,EAAE,EAAG,IAAI,CAAC,sCAAsC,CAAC,CAChG,CAEA,OAAO,SAAS,WACd,EAAiB,QACjB,EAAiB,OAAO,yBAAyB,EACjD,IAAM,EAAc,EAAE,CACtB,EAAY,IAAI,CAAC,OAAO,yBAAyB,CAAC,SAClD,IAAI,EAAe,EAEnB,KAAO,EAAe,EAAY,MAAM,EAAE,CACxC,IAAM,EAAa,CAAW,CAAC,IAAe,CACxC,EAAQ,EAAW,KAAK,AAC1B,AAAiB,CAAA,YAAjB,OAAO,EACT,EAAiB,GACR,AAAiB,UAAjB,OAAO,EAChB,EAAY,IAAI,CAAC,OAAO,yBAAyB,CAAC,MAAA,EAAA,EAAS,CAAC,IAvBhC,CAAA,IAA5B,AAwB2B,EAxBhB,YAAY,EACvB,AAAwB,CAAA,IAAxB,AAuB2B,EAvBhB,QAAQ,EACnB,AAA0B,YAA1B,OAAO,AAsBoB,EAtBT,GAAG,EAuBrB,QAAQ,KAAK,CAAC,yBAA0B,EAE5C,CACF","file":"integrity_check.js","sourcesContent":["/* Copyright yut951121@gmail.com 2024 */\r\n/* eslint-disable no-undef */\r\nconst noop = () => { throw new Error('This function should not be called') }\r\nfunction isNative (fn) {\r\n  const name = fn.name\r\n  if ((typeof name) !== 'string') return false\r\n  const iter = name[Symbol.iterator]\r\n  if (noop.toString.call(iter) !== 'function [Symbol.iterator]() { [native code] }') return false\r\n  for (const c of name) {\r\n    if (c === '\\t') return false\r\n    if (c === '\\r') return false\r\n    if (c === '\\n') return false\r\n    if (c === ' ') return false\r\n    if (c === '!') return false\r\n    if (c === '\"') return false\r\n    if (c === '#') return false\r\n    if (c === '%') return false\r\n    if (c === '&') return false\r\n    if (c === '\\'') return false\r\n    if (c === '(') return false\r\n    if (c === ')') return false\r\n    if (c === '*') return false\r\n    if (c === '+') return false\r\n    if (c === ',') return false\r\n    if (c === '-') return false\r\n    if (c === '.') return false\r\n    if (c === '/') return false\r\n    if (c === ':') return false\r\n    if (c === ';') return false\r\n    if (c === '<') return false\r\n    if (c === '=') return false\r\n    if (c === '>') return false\r\n    if (c === '?') return false\r\n    if (c === '@') return false\r\n    if (c === '[') return false\r\n    if (c === '\\\\') return false\r\n    if (c === ']') return false\r\n    if (c === '^') return false\r\n    if (c === '_') return false\r\n    if (c === '`') return false\r\n    if (c === '{') return false\r\n    if (c === '|') return false\r\n    if (c === '}') return false\r\n    if (c === '~') return false\r\n  }\r\n  return noop.toString.call(fn) === `function ${fn.name}() { [native code] }`\r\n}\r\n\r\nfunction isPropertyFrozen (descriptor) {\r\n  if (descriptor.configurable === true) return false\r\n  if (descriptor.writable === true) return false\r\n  if (typeof descriptor.set === 'function') return false\r\n  return true\r\n}\r\n\r\nfunction throwIfNotNative (fn) {\r\n  if (!isNative(fn)) throw new Error(`Function ${fn.name} is user-defined and cannot be trusted`)\r\n}\r\n\r\nexport function validate () {\r\n  throwIfNotNative(Object)\r\n  throwIfNotNative(Object.getOwnPropertyDescriptors)\r\n  const descriptors = []\r\n  descriptors.push(Object.getOwnPropertyDescriptors(Object))\r\n  let visitedIndex = 0\r\n\r\n  while (visitedIndex < descriptors.length) {\r\n    const descriptor = descriptors[visitedIndex++]\r\n    const value = descriptor.value\r\n    if (typeof value === 'function') {\r\n      throwIfNotNative(value)\r\n    } else if (typeof value === 'object') {\r\n      descriptors.push(Object.getOwnPropertyDescriptors(value ?? {}))\r\n    } else if (!isPropertyFrozen(descriptor)) {\r\n      console.error('Property is not frozen', descriptor)\r\n    }\r\n  }\r\n}\r\n"]}