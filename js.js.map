{"version":3,"sources":["src/js.js"],"names":[],"mappings":"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","file":"js.js","sourcesContent":["const documentParsed = performance.now()\nlet preventInitCall = false\nconst DEBUG = false\nconst intervals = []\nconst setIntervalWithReset = (fn, ms, ...args) => {\n  const id = setInterval(fn, ms, ...args)\n  intervals.push(id)\n  return id\n}\nconst GAME_VERSION = 2\n\nconst scriptHTML = document.currentScript.outerHTML\nconst initialHTMLWithoutThisScript = document.body.innerHTML.replace(scriptHTML, '')\n\nlet wordListFull = `사과\n바나나\n포도\n딸기\n오렌지\n체리\n복숭아\n수박\n파인애플\n배\n레몬\n라즈베리\n블루베리\n키위\n망고\n참외\n아보카도\n석류\n자몽\n두리안\n코코넛\n라임\n자두\n무화과\n감\n살구\n상추\n양파\n당근\n감자\n토마토\n오이\n시금치\n호박\n콩\n옥수수\n파프리카\n브로콜리\n고구마\n아스파라거스\n샐러리\n양배추\n고추\n버섯\n마늘\n생강\n비트\n콜라비\n아티초크\n미역\n김\n호박\n피망\n죽순\n무\n고사리\n갓\n청경채\n케일\n취나물\n치커리\n미나리\n더덕\n토란\n귤\n대추\n파파야\n복분자\n유자\n부추\n매실\n호두\n가지\n노각`.split('\\n')\n\nfunction init() {\n  'use strict'\n  if (preventInitCall) {\n    throw new Error('This function should not be called more than once.')\n  }\n\n  preventInitCall = true\n\n  \n  const dirMap = [\n    [3, 2, 1],\n    [4, -1, 0],\n    [5, 6, 7]\n  ]\n\n\n  const [nfdChoBase, nfdJungBase, nfdJongBase] = [...'각'.normalize('NFD')]\n  const simpleJungBase = 'ㅏ'\n  const jungDiff = simpleJungBase.charCodeAt(0) - nfdJungBase.charCodeAt(0)\n\n\n  const simpleTocompositeJamoMap = {\n    'ㄱㄱ': 'ㄲ',\n    'ㄱㅅ': 'ㄳ',\n    'ㄴㅈ': 'ㄵ',\n    'ㄴㅎ': 'ㄶ',\n    'ㄷㄷ': 'ㄸ',\n    'ㄹㄱ': 'ㄺ',\n    'ㄹㅁ': 'ㄻ',\n    'ㄹㅂ': 'ㄼ',\n    'ㄹㅅ': 'ㄽ',\n    'ㄹㅌ': 'ㄾ',\n    'ㄹㅍ': 'ㄿ',\n    'ㄹㅎ': 'ㅀ',\n    'ㅂㅂ': 'ㅃ',\n    'ㅂㅅ': 'ㅄ',\n    'ㅅㅅ': 'ㅆ',\n    'ㅈㅈ': 'ㅉ',\n    'ㅏㅣ': 'ㅐ',\n    'ㅑㅣ': 'ㅒ',\n    'ㅓㅣ': 'ㅔ',\n    'ㅕㅣ': 'ㅖ',\n    'ㅗㅏ': 'ㅘ',\n    'ㅗㅏㅣ': 'ㅙ',\n    'ㅗㅣ': 'ㅚ',\n    'ㅜㅓ': 'ㅝ',\n    'ㅜㅓㅣ': 'ㅞ',\n    'ㅜㅣ': 'ㅟ',\n    'ㅡㅣ': 'ㅢ'\n  }\n\n  const compositeToSimpleJamoMap = Object.fromEntries(Object.entries(simpleTocompositeJamoMap).map(([simple, composite]) => [composite, simple]))\n\n  let randomHueBase = -1\n  let previousGameState\n  try {\n    previousGameState = deserializeGameState(load('gameState'))\n    if (previousGameState) {\n      randomHueBase = previousGameState[5]\n    }\n  } catch (e) {\n    console.error(e)\n    clear('gameState')\n  }\n\n  const cloned = [...wordListFull]\n\n  const wordCount = 16\n\n  function simpleJamoBreakdown(word) {\n    return [...word.normalize('NFC')].flatMap(decomposeIntoSimple)\n  }\n\n  const wordList = previousGameState ? previousGameState[0] : []\n  if (!previousGameState) {\n    for (let i = 0; i < wordCount; i++) {\n      wordList.push(...cloned.splice(randomInt(0, cloned.length - 1), 1))\n    }\n    cloned.length = 0\n  }\n\n  const wordListElement = document.getElementById('word-list')\n  const wordListTemplate = document.getElementById('word-template')\n  wordList.forEach(word => {\n    const li = wordListTemplate.content.cloneNode(true).querySelector('li')\n    li.textContent = word\n    li.dataset.word = word\n    wordListElement.appendChild(li)\n  })\n\n  const jamoBoardElement = document.getElementById('jamo-board')\n  const jamoBoardTemplate = document.getElementById('jamo-template')\n\n  jamoBoardElement.addEventListener('selectstart', (e) => {\n    e.preventDefault()\n  })\n  let isRightClick = false\n  jamoBoardElement.addEventListener('contextmenu', (e) => {\n    if (!isRightClick) {\n      e.preventDefault()\n    }\n    isRightClick = false\n  })\n\n\n  const width = 12\n  const height = 12\n\n  const simpleJamoList = `ㄱㄴㄷㄹㅁㅂㅅㅇㅈㅊㅋㅌㅍㅎㅏㅑㅓㅕㅗㅛㅜㅠㅡㅣ`\n\n\n  function calculateChecksum(gs) {\n    return [...gs].map(c => c.charCodeAt()).reduce((acc, val) => ((acc >>> 1) | ((acc & 1) << 15)) ^ val, 0)\n  }\n\n  function serializeGameState() {\n    const words = wordList.join()\n    const jamoBoard = Array.from({ length: width * height }, (_, i) => jamoElements[i].textContent).join('')\n    const completions = Array.from(jamoBoardElement.querySelectorAll('.completion-bar')).filter((elem) => elem !== currentJamoCompletion).map(elem => {\n      return `${elem.dataset.start},${elem.dataset.end}`\n    }).join()\n    const gs = `${GAME_VERSION}|${words}|${width}|${height}|${jamoBoard}|${completions}|${randomHueBase}`\n    return `${gs}|${calculateChecksum(gs)}`\n  }\n\n  function deserializeGameState(gs) {\n    if (gs === null) {\n      return null\n    }\n    const [gameVersion, words, width, height, jamoBoard, completions, randomHueBase, checksum] = gs.split('|')\n    if (gameVersion * 1 !== GAME_VERSION) {\n      throw new Error('The saved game state is from a different version of the game.')\n    }\n    const expectedChecksum = calculateChecksum(`${gameVersion}|${words}|${width}|${height}|${jamoBoard}|${completions}|${randomHueBase}`)\n    if (expectedChecksum !== checksum * 1) {\n      throw new Error('saved game state is corrupted')\n    }\n    if (jamoBoard.length !== width * height) {\n      throw new Error('saved game state is corrupted')\n    }\n    return [\n      words.split(','),\n      width * 1,\n      height * 1,\n      jamoBoard,\n      completions ? completions.split(',').map(Number).reduce((acc, val) => {\n        if (!acc.length || acc.at(-1).length === 4) {\n          acc.push([])\n        }\n        acc.at(-1).push(val)\n        return acc\n      }, []) : [],\n      randomHueBase * 1\n    ]\n  }\n\n\n  function decomposeIntoSimple(char) {\n    const [nfdCho, nfdJung, nfdJong] = [...char.normalize('NFD')].concat(['', '', '']).slice(0, 3)\n    const simpleCho = `ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ`[nfdCho.charCodeAt(0) - nfdChoBase.charCodeAt(0)]\n    const simpleJung = String.fromCharCode(nfdJung.charCodeAt(0) + jungDiff)\n    const simpleJong = nfdJong.length ? `ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ`[nfdJong.charCodeAt(0) - nfdJongBase.charCodeAt(0)] : ''\n    return [simpleCho, simpleJung, simpleJong].flatMap(jamo => [...(compositeToSimpleJamoMap[jamo] ?? jamo)])\n  }\n\n  function composeIntoComposite(simpleJamo) { // @TODO: complete this function\n    simpleJamo = [...simpleJamo]\n    const hangulImeStateMachine = {\n      cho: {\n        'ㄱ': ['ㄱ', 'jung'],\n        'ㄴㄹㅁㅇㅊㅋㅌㅍㅎ': ['jung'],\n        'ㄷ': ['ㄷ', 'jung'],\n        'ㅂ': ['ㅂ', 'jung'],\n        'ㅅ': ['ㅅ', 'jung'],\n        'ㅈ': ['ㅈ', 'jung'],\n      },\n      jung: {\n        'ㅏㅑㅓㅕㅡ': ['ㅣ', 'jong'],\n        'ㅗ': ['ㅏ', 'ㅣ', 'jong'],\n        'ㅛㅠㅣ': ['jong'],\n        'ㅜ': ['ㅓ', 'ㅣ', 'jong'],\n      },\n      jong: {\n        'ㄱ': ['ㄱ', 'ㅅ', 'cho'],\n        'ㄴ': ['ㅈ', 'ㅎ', 'cho'],\n        'ㄷㅁㅇㅈㅊㅋㅌㅍㅎ': ['cho'],\n        'ㄹ': ['ㄱ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅌ', 'ㅍ', 'ㅎ', 'cho'],\n        'ㅂ': ['ㅅ', 'cho'],\n        'ㅅ': ['ㅅ', 'cho'],\n      }\n    }\n    const maxLengths = {\n      cho: 2,\n      jung: 3,\n      jong: 2\n    }\n    let currentLengths = {\n      cho: 0,\n      jung: 0,\n      jong: 0\n    }\n    // 'ㅂㅂㅜㅓㅣㄹㄱ' -> [['ㅂㅂ'], ['ㅜ','ㅓ','ㅣ'], ['ㄹ', 'ㄱ']]\n    let currentState = 'cho'\n    const grouped = []\n    const group = []\n    let nextCandidate = null\n    while (simpleJamo[0]) {\n      const jamo = simpleJamo.shift() // 'ㅂ'\n      group.push(jamo)\n      currentLengths[currentState]++\n      const transitionOptions = hangulImeStateMachine[currentState] // cho: { ... }\n      const transition = Object.entries(transitionOptions).find(([jamoOptions, _]) => jamoOptions.includes(jamo))\n      if (DEBUG) debugger\n      if (!transition) {\n        throw new Error('cannot find suitable continuation for jamo sequence')\n      }\n      const [_, targetStates] = transition // ['ㅂ', 'jung']\n      if (targetStates.length === 1 || currentLengths[currentState] === maxLengths[currentState]) {\n        currentLengths[currentState] = 0\n        currentState = targetStates[0]\n        grouped.push([...group])\n        group.length = 0\n        if (nextCandidate && !nextCandidate.includes(jamo)) {\n          throw new Error('next candidate mismatch')\n        }\n        nextCandidate = null\n      } else {\n        nextCandidate = targetStates.slice(0, -1)\n      }\n    }\n\n    return grouped\n  }\n  if (DEBUG) {\n    window.composeIntoComposite = composeIntoComposite\n  }\n\n  const randomJamo = () => {\n    return simpleJamoList[randomInt(0, simpleJamoList.length - 1)]\n  }\n\n  const simpleJamoFromWordList = wordList.flatMap(word => [...word.normalize('NFC')].flatMap(decomposeIntoSimple))\n  const jamoFromWordlist = () => {\n    return simpleJamoFromWordList[randomInt(0, simpleJamoFromWordList.length - 1)]\n  }\n\n  const gap = 0.75\n\n  function noTransitionZone(fn, elem) {\n    elem.classList.add('notransition')\n    fn()\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => { // 1 frame skip does not work in some cases\n        elem.classList.remove('notransition')\n      })\n    })\n  }\n\n  const fillJamoBoard = () => {\n    jamoBoardElement.style.setProperty('--gap', `${gap}em`)\n    // set css variable for grid styling\n    jamoBoardElement.style.setProperty('--width', width)\n    jamoBoardElement.style.setProperty('--height', height)\n\n    noTransitionZone(() => {\n      for (let i = 0; i < width * height; i++) {\n        const jamoElement = jamoBoardTemplate.content.cloneNode(true).querySelector('i')\n        const jamo = previousGameState ? previousGameState[3][i] : (randomInt(0, 1) ? randomJamo() : jamoFromWordlist())\n        jamoElement.textContent = jamo\n        jamoBoardElement.appendChild(jamoElement)\n      }\n    }, jamoBoardElement)\n  }\n\n  fillJamoBoard()\n\n\n  const jamoWrittenPositions = Array.from({ length: width * height }, () => null)\n\n\n  const getPosition = (x, y, direction, progress) => {\n    if (direction < 0 || direction > 7) {\n      throw new RangeError('direction must be 0 to 7')\n    }\n    for (let dy = -1; dy <= 1; dy++) {\n      for (let dx = -1; dx <= 1; dx++) {\n        if (dirMap[dy + 1][dx + 1] === direction) {\n          return [x + dx * progress, y + dy * progress]\n        }\n      }\n    }\n  }\n\n  const jamoElements = jamoBoardElement.querySelectorAll('#jamo-board>i');\n\n  jamoElements.forEach((jamoElement, jamoIndex) => {\n    jamoElement.dataset.index = jamoIndex\n  })\n\n  /**\n   * \n   * @param {string} word \n   * @param {number} x \n   * @param {number} y \n   * @param {number} direction 0 to 7, starting from towards east(right) 1/8 turn CCW each step\n   */\n  const writeWord = (word, x, y, direction) => {\n    const breakdown = simpleJamoBreakdown(word)\n    // first check without writing\n    if (breakdown.length > width && breakdown.length > height) {\n      throw new RangeError('word too long for board')\n    }\n    for (let i = 0; i < breakdown.length; i++) {\n      const [targetX, targetY] = getPosition(x, y, direction, i)\n      if (targetX < 0 || targetX >= width || targetY < 0 || targetY >= height) {\n        return false\n      }\n      const jamoIndex = targetY * width + targetX\n      const existingJamo = jamoWrittenPositions[jamoIndex]\n      if (existingJamo && existingJamo !== breakdown[i]) {\n        return false\n      }\n    }\n\n    let startX;\n    let startY;\n    let endX;\n    let endY;\n    for (let i = 0; i < breakdown.length; i++) {\n      const [targetX, targetY] = getPosition(x, y, direction, i)\n      if (i === 0) {\n        [startX, startY] = [targetX, targetY]\n      }\n      if (i === breakdown.length - 1) {\n        [endX, endY] = [targetX, targetY]\n      }\n      const jamo = breakdown[i]\n      const jamoIndex = targetY * width + targetX\n      jamoWrittenPositions[jamoIndex] = jamo\n      const jamoElement = jamoElements[jamoIndex]\n      jamoElement.textContent = jamo\n    }\n\n    return true\n  }\n\n  const cellSize = 2\n  jamoBoardElement.style.setProperty('--size', `${cellSize}rem`)\n\n  function memo(key, compute) {\n    const cache = memo.cache ?? (memo.cache = new Map())\n    if (cache.has(key)) {\n      return cache.get(key)\n    }\n    const result = compute()\n    cache.set(key, result)\n    return result\n  }\n\n  function createCompletionBarElement(startX, startY, endX, endY, updateElement = null) {\n    const completionBarTemplate = memo(createCompletionBarElement, () => document.getElementById('completion-bar-template'))\n    const completionBarElement = updateElement ?? completionBarTemplate.content.cloneNode(true).querySelector('.completion-bar')\n    const padding = 0.25\n\n    completionBarElement.dataset.start = `${startX},${startY}`\n    completionBarElement.dataset.end = `${endX},${endY}`\n\n    const sdx = Math.sign(endX - startX)\n    const sdy = Math.sign(endY - startY)\n    const xmin = Math.min(startX, endX);\n    const xmax = Math.max(startX, endX);\n    const ymin = Math.min(startY, endY);\n    const ymax = Math.max(startY, endY);\n    const top = ymin * cellSize + (gap * ymin);\n    const left = xmin * cellSize + (gap * xmin);\n    const width = (xmax - xmin + 1) * cellSize + (gap * (xmax - xmin));\n    const height = (ymax - ymin + 1) * cellSize + (gap * (ymax - ymin));\n\n    completionBarElement.style.setProperty('--top', `${top}em`)\n    completionBarElement.style.setProperty('--left', `${left}em`)\n    completionBarElement.style.setProperty('--width', `${width}em`)\n    completionBarElement.style.setProperty('--height', `${height}em`)\n\n    const hypot = Math.hypot(width, height) + padding\n    const angle = Math.atan2(sdy * height, sdx * width) * 180 / Math.PI\n    completionBarElement.style.setProperty('--thick', `${cellSize + padding}em`)\n    completionBarElement.style.setProperty('--hypot', `${hypot}em`)\n    completionBarElement.style.setProperty('--angle', `${angle}deg`)\n    const rand = Math.floor(randomFromCoords(startX, startY) * colorSteps) * Math.floor(360 / colorSteps)\n    const color = `oklch(75% 75% ${randomHueBase + rand}deg)`\n    completionBarElement.style.setProperty('--color', color)\n\n    return completionBarElement\n  }\n\n  let foundWords = 0\n\n  const stageClearDialog = document.getElementById('stage-clear-dialog')\n  const yesButton = stageClearDialog.querySelector('#next-stage')\n  const noButton = stageClearDialog.querySelector('#cancel-next-stage')\n  yesButton.addEventListener('click', () => {\n    clear('gameState')\n    reset()\n  })\n  noButton.addEventListener('click', () => {\n    stageClearDialog.close()\n  })\n\n  function markWordAsFound(wordElement, completionBarElement) {\n    foundWords++\n    wordElement.style.setProperty('--color', completionBarElement.style.getPropertyValue('--color'))\n    wordElement.classList.add('found')\n    if (foundWords === wordCount) {\n      stageClearDialog.showModal()\n    }\n  }\n\n  function markCompletionAsCompleted(startX, startY, endX, endY) {\n    const completionBarElement = createCompletionBarElement(startX, startY, endX, endY)\n    const jamoSequence = completionToJamoSequence(startX, startY, endX, endY)\n    const foundWord = findWordByJamoSequence(jamoSequence)\n    const wordElement = wordListElement.querySelector(`li[data-word=\"${foundWord}\"]`)\n    markWordAsFound(wordElement, completionBarElement)\n    jamoBoardElement.appendChild(completionBarElement)\n  }\n\n  function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  const colorSteps = 16\n  if (!previousGameState) {\n    randomHueBase = randomInt(0, 359)\n  }\n\n  function randomFromCoords(x, y) {\n    const dot = x * 12.9898 + y * 78.233\n    return (Math.sin(dot) * 43758.5453) % 1\n  }\n\n  const easyDirection = true\n\n  const numDirections = easyDirection ? 4 : 8\n  const directionsProbabilityDist = Array.from({ length: numDirections }, () => wordCount)\n  let sum = wordCount * numDirections\n\n  const getDirection = () => {\n    const randomUniform = randomInt(0, sum - 1)\n    let temp = 0\n    for (let i = 0; i < numDirections; i++) {\n      temp += directionsProbabilityDist[i]\n      if (randomUniform < temp) {\n        return i\n      }\n    }\n  }\n\n  if (!previousGameState) {\n    try {\n      wordList.toSorted((a, b) => {\n        return simpleJamoBreakdown(b).length - simpleJamoBreakdown(a).length\n      }).forEach((word) => {\n        let x\n        let y\n        let direction\n        let repeated = 0\n        while (true) {\n          x = randomInt(0, width - 1)\n          y = randomInt(0, height - 1)\n          direction = getDirection()\n          const directionCorrected = easyDirection ? ((direction + 6) % 8) : direction\n          const success = writeWord(word, x, y, directionCorrected)\n          if (success) {\n            directionsProbabilityDist[direction]--\n            sum--\n            if (wordCount - directionsProbabilityDist[direction] > wordCount / 3) {\n              sum -= directionsProbabilityDist[direction]\n              directionsProbabilityDist[direction] = 0\n            }\n            break\n          }\n          if (repeated > wordCount ** 2) {\n            throw 'The board generation was stuck in impossible state, so the page was reloaded.'\n          }\n          repeated++\n        }\n      })\n    } catch (e) {\n      console.error(e)\n      reset()\n      return\n    }\n  } else {\n    previousGameState[4].forEach(([startX, startY, endX, endY]) => {\n      markCompletionAsCompleted(startX, startY, endX, endY)\n    })\n  }\n\n  // add event listener for dark mode toggle\n  const darkModeToggleButton = document.getElementById('dark-mode-toggle')\n\n  const toggleModes = () => {\n    const mode = darkModeToggleButton.dataset.mode\n    const options = darkModeToggleButton.dataset.modeOptions.split('|')\n    const nextMode = options[(options.indexOf(mode) + 1) % options.length]\n    const startViewTransition = (change) => document.startViewTransition ? document.startViewTransition(change) : change()\n    startViewTransition(() => {\n      darkModeToggleButton.dataset.mode = nextMode\n      document.documentElement.dataset.mode = nextMode\n    })\n    localStorage.darkMode = nextMode\n  }\n  darkModeToggleButton.addEventListener('click', toggleModes)\n  const darkMode = localStorage.darkMode\n  if (darkMode) {\n    noTransitionZone(() => {\n      darkModeToggleButton.dataset.mode = darkMode\n      document.documentElement.dataset.mode = darkMode\n    }, darkModeToggleButton)\n  }\n\n  const pointerdown = new Proxy({ value: false }, {\n    set: (target, prop, value) => {\n      if (prop === 'value' && typeof value === 'boolean') {\n        if (DEBUG) {\n          Array.from(jamoBoardElement.querySelectorAll('.start, .mid, .end')).forEach(elem => elem.classList.remove('start', 'mid', 'end'))\n        }\n        return Reflect.set(target, prop, value)\n      }\n    }\n  })\n  \n  let dragStartPos = [-1, -1]\n  let dragDir = -1\n  let dragEndPos = [-1, -1]\n\n  function indexToPos(index) {\n    return [index % width, Math.floor(index / width)]\n  }\n\n  function isOctilinear(origin, target) {\n    const [ox, oy] = origin\n    const [tx, ty] = target\n    const isOrthogonal = ox === tx || oy === ty\n    const isDiagonal = Math.abs(ox - tx) === Math.abs(oy - ty)\n    if (!(isOrthogonal || isDiagonal)) {\n      return -1\n    }\n    const [dx, dy] = [tx - ox, ty - oy]\n    return dirMap[Math.sign(dy) + 1][Math.sign(dx) + 1]\n  }\n\n  function getClosestOctilinearPoint(origin, target, dir) {\n    const [ox, oy] = origin\n    const [tx, ty] = target\n    const [dx, dy] = [tx - ox, ty - oy]\n    let [dx1, dy1] = [tx - ox, ty - oy]\n    let [dx2, dy2] = [tx - ox, ty - oy]\n\n    {\n      // orthogonal\n      if (Math.abs(dx1) < Math.abs(dy1)) {\n        dx1 = 0\n      } else {\n        dy1 = 0\n      }\n    }\n\n    {\n      // diagonal\n      if ((dx2 + dy2) % 2) {\n        // parity mismatch adjustment\n        if (Math.abs(dx2) < Math.abs(dy2)) {\n          dy2 -= Math.sign(dy2)\n        } else {\n          dx2 -= Math.sign(dx2)\n        }\n      }\n      let dist = Math.abs(Math.abs(dx2) - Math.abs(dy2)) / 2\n      if (Math.abs(dx2) < Math.abs(dy2)) {\n        dx2 += Math.sign(dx2) * dist\n        dy2 -= Math.sign(dy2) * dist\n      } else {\n        dx2 -= Math.sign(dx2) * dist\n        dy2 += Math.sign(dy2) * dist\n      }\n    }\n\n    const dist1 = Math.abs(dx - dx1) + Math.abs(dy - dy1)\n    const dist2 = Math.abs(dx - dx2) + Math.abs(dy - dy2)\n\n    if (dist1 === dist2) {\n      if (dir % 2 === 0) {\n        return [ox + dx1, oy + dy1]\n      } else {\n        return [ox + dx2, oy + dy2]\n      }\n    } else {\n      if (dist1 < dist2) {\n        return [ox + dx1, oy + dy1]\n      } else {\n        return [ox + dx2, oy + dy2]\n      }\n    }\n  }\n\n  let currentJamoCompletion = null\n\n  function updateJamoCompletion() {\n    if (dragStartPos[0] !== -1 && dragStartPos[1] !== -1) {\n      const exists = currentJamoCompletion !== null\n      const [sx, sy] = dragStartPos\n      const [ex, ey] = dragEndPos[0] === -1 && dragEndPos[1] === -1 ? [sx, sy] : dragEndPos\n      currentJamoCompletion = createCompletionBarElement(sx, sy, ex, ey, currentJamoCompletion)\n      if (!exists) {\n        jamoBoardElement.appendChild(currentJamoCompletion)\n      }\n    }\n  }\n\n  function createRange(start, end) {\n    const inc = start < end ? 1 : -1;\n    const result = [];\n    for (let i = 0; i <= Math.abs(end - start); i += 1) {\n      result.push(i * inc + start)\n    }\n    return result\n  }\n\n  function completionToJamoSequence(startX, startY, endX, endY) {\n    const rangeX = createRange(startX, endX)\n    const rangeY = createRange(startY, endY)\n    const longer = Math.max(rangeX.length, rangeY.length)\n    const coords = Array.from({ length: longer }, (_, i) => [rangeX[i] ?? startX, rangeY[i] ?? startY])\n    return coords.map(([x, y]) => jamoElements[y * width + x].textContent).join('')\n  }\n\n  function findWordByJamoSequence(jamoSequence) {\n    return wordList.find(word => {\n      const [simple, reversed] = memo(word, () => {\n        const simple = simpleJamoBreakdown(word)\n        return [simple.join(''), simple.toReversed().join('')]\n      })\n      return simple === jamoSequence || reversed === jamoSequence\n    })\n  }\n\n  function checkJamoCompletion(jamoCompletionElement) {\n    try {\n      if (jamoCompletionElement === null) {\n        return\n      }\n      const [startX, startY] = jamoCompletionElement.dataset.start.split(',').map(Number)\n      const [endX, endY] = jamoCompletionElement.dataset.end.split(',').map(Number)\n      if (startX === endX && startY === endY) {\n        jamoCompletionElement.remove()\n        return\n      }\n      const dir = isOctilinear([startX, startY], [endX, endY])\n      if (dir === -1) {\n        jamoCompletionElement.remove()\n        return\n      }\n      const jamoSequence = completionToJamoSequence(startX, startY, endX, endY)\n      const foundWord = findWordByJamoSequence(jamoSequence)\n      if (foundWord) {\n        const wordElement = wordListElement.querySelector(`li[data-word=\"${foundWord}\"]`)\n        if (wordElement) {\n          if (wordElement.classList.contains('found')) {\n            jamoCompletionElement.remove()\n          } else {\n            markWordAsFound(wordElement, jamoCompletionElement)\n          }\n        }\n      } else {\n        jamoCompletionElement.remove()\n      }\n    } finally {\n      currentJamoCompletion = null\n    }\n  }\n\n  jamoBoardElement.addEventListener('pointerdown', (e) => {\n    if (e.target.matches('#jamo-board>i')) {\n      pointerdown.value = true\n      if (DEBUG) {\n        jamoElement.classList.add('start')\n      }\n      dragStartPos = calculateCellPosFromCoords(e.clientX, e.clientY)\n      dragEndPos = [-1, -1]\n      dragDir = -1\n      updateJamoCompletion()\n    }\n  })\n\n  document.addEventListener('pointerup', (e) => {\n    isRightClick = e.button === 2\n    pointerdown.value = false\n    if (dragEndPos[0] !== -1 && dragEndPos[1] !== -1 && (dragStartPos[0] !== dragEndPos[0] || dragStartPos[1] !== dragEndPos[1])) {\n      checkJamoCompletion(currentJamoCompletion)\n    }\n  })\n\n  function calculateOvershoot(value, min, max) {\n    if (value < min) {\n      return min - value\n    }\n    if (value > max) {\n      return value - max\n    }\n    return 0\n  }\n\n  function calculateBoardPosition() {\n    const boardElementRect = jamoBoardElement.getBoundingClientRect()\n    return [boardElementRect.left, boardElementRect.top]\n  }\n\n  function calculateCellSize() {\n    const firstElement = jamoElements[0]\n    const rightElement = jamoElements[1]\n    const bottomElement = jamoElements[width]\n    const firstRect = firstElement.getBoundingClientRect()\n    const rightRect = rightElement.getBoundingClientRect()\n    const bottomRect = bottomElement.getBoundingClientRect()\n    const cellWidth = rightRect.left - firstRect.left\n    const cellHeight = bottomRect.top - firstRect.top\n    return [cellWidth, cellHeight]\n  }\n\n  function calculateCellPosFromCoords(clientX, clientY) {\n    const [boardLeft, boardTop] = calculateBoardPosition()\n    const [cellWidth, cellHeight] = calculateCellSize()\n    const [relativeX, relativeY] = [clientX - boardLeft, clientY - boardTop]\n    const [cellX, cellY] = [Math.floor(relativeX / cellWidth), Math.floor(relativeY / cellHeight)]\n    return [cellX, cellY]\n  }\n\n  document.addEventListener('pointermove', (e) => {\n    if (pointerdown.value) {\n      e.preventDefault()\n      const pos = calculateCellPosFromCoords(e.clientX, e.clientY)\n      if (dragStartPos[0] === pos[0] && dragStartPos[1] === pos[1]) {\n        return\n      }\n      if (DEBUG) {\n        jamoBoardElement.querySelector('.mid')?.classList.remove('mid')\n        jamoElement.classList.add('mid')\n      }\n      const dir = isOctilinear(dragStartPos, pos)\n      if (dir !== -1) {\n        dragEndPos = pos\n        dragDir = dir\n      } else if (dragEndPos[0] !== -1 && dragEndPos[1] !== -1) {\n        dragEndPos = getClosestOctilinearPoint(dragStartPos, pos, dragDir)\n      }\n      if (dragEndPos[0] !== -1 && dragEndPos[1] !== -1) {\n        let [cx, cy] = dragEndPos\n        if (cx < 0 || cx >= width || cy < 0 || cy >= height) {\n          const correctedDragDir = isOctilinear(dragStartPos, [cx, cy])\n          const overshootX = calculateOvershoot(cx, 0, width - 1)\n          const overshootY = calculateOvershoot(cy, 0, height - 1)\n          const maxOvershoot = Math.max(overshootX, overshootY);\n          [cx, cy] = getPosition(cx, cy, correctedDragDir, -maxOvershoot)\n        }\n        dragEndPos = [cx, cy]\n\n        const closestIndex = dragEndPos[1] * width + dragEndPos[0]\n        const closestElement = jamoElements[closestIndex]\n        if (DEBUG) {\n          jamoBoardElement.querySelector('.end')?.classList.remove('end')\n          closestElement.classList.add('end')\n        }\n        updateJamoCompletion()\n      }\n    }\n  })\n\n  if (!previousGameState) {\n    save('gameState', serializeGameState())\n  }\n\n  window.serializeGameState = serializeGameState\n\n  const mainElement = document.querySelector('main')\n\n  const resizeToFit = () => {\n    const screenWidth = screen.availWidth\n    const screenHeight = screen.availHeight\n\n    wordListElement.style.zoom = 1\n    wordListElement.style.fontSize = '1rem'\n    jamoBoardElement.style.zoom = 1\n    mainElement.style.zoom = 1\n\n    const wordListElementWidth = wordListElement.getBoundingClientRect().width\n    const jamoBoardElementWidth = jamoBoardElement.getBoundingClientRect().width\n  \n    wordListElement.style.zoom = Math.min(1, screenWidth / wordListElementWidth)\n    wordListElement.style.fontSize = `${1 / wordListElement.style.zoom}rem`\n    jamoBoardElement.style.zoom = Math.min(1, screenWidth / jamoBoardElementWidth)\n  \n    const mainElementHeight = mainElement.getBoundingClientRect().height\n  \n    mainElement.style.zoom = Math.min(1, screenHeight / mainElementHeight)\n  }\n  resizeToFit()\n  window.addEventListener('resize', resizeToFit)\n\n  window.addEventListener('beforeunload', () => {\n    const currentStateSaved = load('gameState')\n    if (currentStateSaved) {\n      save('gameState', serializeGameState())\n    }\n  })\n\n  const gameInitialized = performance.now()\n\n  const PROFILE = false\n  if (PROFILE) {\n    requestIdleCallback(() => {\n      const settled = performance.now()\n\n      const t1 = documentParsed - begin\n      const t2 = jsParsed - documentParsed\n      const t3 = gameInitialized - jsParsed\n      const t4 = settled - gameInitialized\n      const t5 = settled - begin\n      \n      const perfHistory = load('perfHistory', [])\n      perfHistory.push([t1, t2, t3, t4, t5])\n      save('perfHistory', perfHistory)\n    })\n  }\n}\n\nfunction reset() {\n  intervals.forEach(clearInterval)\n  intervals.length = 0\n  const children = [...document.body.children].filter(elem => elem !== document.currentScript)\n  children.forEach(child => child.remove())\n  document.body.innerHTML = initialHTMLWithoutThisScript\n  preventInitCall = false\n  init()\n}\n\nfunction load(key, fallback) {\n  const data = localStorage[key]\n  if (typeof data === 'string') {\n    return JSON.parse(data)\n  }\n  return fallback ?? null\n}\n\nfunction clear(key) {\n  delete localStorage[key]\n}\n\nfunction save(key, value) {\n  localStorage[key] = JSON.stringify(value)\n}\n\nfunction average(arr) {\n  return arr.reduce((acc, val) => acc + val, 0) / arr.length\n}\nfunction median(arr) {\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const mid = Math.floor(sorted.length / 2)\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid - 1] + sorted[mid]) / 2\n  }\n  return sorted[mid]\n}\n\nfunction getCurrentFunctionName() {\n  const currentStackRaw = new Error().stack\n  const callerLine = currentStackRaw.split('\\n').slice(1)[1]\n  const caller = callerLine.match(/at (\\w+)/)[1]\n  return caller\n}\n\nconst jsParsed = performance.now()\n\ninit()\n\nfunction registerKonamiCodeHandler() {\n  const konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a', 'Enter']\n  let konamiCodeIndex = 0\n  const a = async (e) => {\n    if (e.key === konamiCode[konamiCodeIndex]) {\n      konamiCodeIndex++\n      if (konamiCodeIndex === konamiCode.length) {\n        showCrazyShit()\n        window.removeEventListener('keydown', a)\n      }\n    } else {\n      konamiCodeIndex = 0\n    }\n  }\n  window.addEventListener('keydown', a, {passive: true})\n}\n\nfunction showCrazyShit() {\n  const lunaticText = generateLunaticText()\n  const lunaticElement = document.createElement('div')\n  lunaticElement.textContent = lunaticText\n  document.body.appendChild(lunaticElement)\n  const slices = createRandomStyleSlices({textLength: lunaticText.length, numSlices: 100, maxLength: 5})\n  // compute overlapping slices and splice them so that they don't overlap\n  const sliceGroups = slices.reduce((acc, slice) => {\n    const last = acc[acc.length - 1]\n    if (last && last.some(s => s.start < slice.end && s.end > slice.start)) {\n      last.push(slice)\n    } else {\n      acc.push([slice])\n    }\n    return acc\n  }, [])\n\n}\n\ndocument.getElementById('show-settings-panel').addEventListener('click', () => {\n  document.getElementById('settings-panel').showModal()\n})\n"]}