{"version":3,"sources":["src/js.js"],"names":[],"mappings":"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","file":"js.js","sourcesContent":["const DO_NOT_CHANGE_KEEP_FALSE = false\r\n// code to satisfy linter that will be removed at minify\r\nif (DO_NOT_CHANGE_KEEP_FALSE) {\r\n  /* eslint-disable no-var */\r\n  var localStorage = window.localStorage\r\n  var requestIdleCallback = window.requestIdleCallback\r\n  var requestAnimationFrame = window.requestAnimationFrame\r\n  var screen = window.screen\r\n  /* eslint-enable no-var */\r\n}\r\n\r\nconst GAME_VERSION = 4\r\nconst DEBUG = false\r\nconst PROFILE = false\r\n\r\nconst documentParsed = performance.now()\r\n\r\nconst scriptHTML = document.currentScript.outerHTML\r\nconst initialHTMLWithoutThisScript = document.body.innerHTML.replace(scriptHTML, '')\r\n\r\nconst wordListFull = `사과\r\n바나나\r\n포도\r\n딸기\r\n오렌지\r\n체리\r\n복숭아\r\n수박\r\n파인애플\r\n배\r\n레몬\r\n라즈베리\r\n블루베리\r\n키위\r\n망고\r\n참외\r\n아보카도\r\n석류\r\n자몽\r\n두리안\r\n코코넛\r\n라임\r\n자두\r\n무화과\r\n감\r\n살구\r\n상추\r\n양파\r\n당근\r\n감자\r\n토마토\r\n오이\r\n시금치\r\n호박\r\n콩\r\n옥수수\r\n파프리카\r\n브로콜리\r\n고구마\r\n아스파라거스\r\n샐러리\r\n양배추\r\n고추\r\n버섯\r\n마늘\r\n생강\r\n비트\r\n콜라비\r\n아티초크\r\n미역\r\n김\r\n호박\r\n피망\r\n죽순\r\n무\r\n고사리\r\n갓\r\n청경채\r\n케일\r\n취나물\r\n치커리\r\n미나리\r\n더덕\r\n토란\r\n귤\r\n대추\r\n파파야\r\n복분자\r\n유자\r\n부추\r\n매실\r\n호두\r\n가지\r\n노각`.split('\\n')\r\n\r\nconst random = {\r\n  s1: 0,\r\n  s2: 0,\r\n  setSeed (seed) {\r\n    this.s1 = seed\r\n    this.s2 = seed\r\n  },\r\n  random () {\r\n    this.s1 = (this.s1 * 1103515245 + 12345) & 2147483647\r\n    this.s2 ^= this.s2 << 13\r\n    this.s2 ^= this.s2 >> 17\r\n    this.s2 ^= this.s2 << 5\r\n    return (this.s1 ^ this.s2 + 2147483648) / 4294967295\r\n  }\r\n}\r\n\r\nfunction init () {\r\n  'use strict'\r\n  if (window.hwgInitialized) {\r\n    throw new Error('Game was already initialized.')\r\n  }\r\n\r\n  window.hwgInitialized = true\r\n\r\n  const stageElement = document.getElementById('stage')\r\n\r\n  const dirMap = [\r\n    [3, 2, 1],\r\n    [4, -1, 0],\r\n    [5, 6, 7]\r\n  ]\r\n\r\n  const [nfdChoBase, nfdJungBase, nfdJongBase] = [...'각'.normalize('NFD')]\r\n  const simpleJungBase = 'ㅏ'\r\n  const jungDiff = simpleJungBase.charCodeAt(0) - nfdJungBase.charCodeAt(0)\r\n\r\n  const simpleToCompositeJamoMap = {\r\n    ㄱㄱ: 'ㄲ',\r\n    ㄱㅅ: 'ㄳ',\r\n    ㄴㅈ: 'ㄵ',\r\n    ㄴㅎ: 'ㄶ',\r\n    ㄷㄷ: 'ㄸ',\r\n    ㄹㄱ: 'ㄺ',\r\n    ㄹㅁ: 'ㄻ',\r\n    ㄹㅂ: 'ㄼ',\r\n    ㄹㅅ: 'ㄽ',\r\n    ㄹㅌ: 'ㄾ',\r\n    ㄹㅍ: 'ㄿ',\r\n    ㄹㅎ: 'ㅀ',\r\n    ㅂㅂ: 'ㅃ',\r\n    ㅂㅅ: 'ㅄ',\r\n    ㅅㅅ: 'ㅆ',\r\n    ㅈㅈ: 'ㅉ',\r\n    ㅏㅣ: 'ㅐ',\r\n    ㅑㅣ: 'ㅒ',\r\n    ㅓㅣ: 'ㅔ',\r\n    ㅕㅣ: 'ㅖ',\r\n    ㅗㅏ: 'ㅘ',\r\n    ㅗㅏㅣ: 'ㅙ',\r\n    ㅗㅣ: 'ㅚ',\r\n    ㅜㅓ: 'ㅝ',\r\n    ㅜㅓㅣ: 'ㅞ',\r\n    ㅜㅣ: 'ㅟ',\r\n    ㅡㅣ: 'ㅢ'\r\n  }\r\n\r\n  const compositeToSimpleJamoMap = Object.fromEntries(Object.entries(simpleToCompositeJamoMap).map(([simple, composite]) => [composite, simple]))\r\n\r\n  let randomHueBase = -1\r\n  let stageNumber = 1\r\n  let previousGameState\r\n  try {\r\n    previousGameState = deserializeGameState(load('gameState'))\r\n    if (previousGameState) {\r\n      stageNumber = previousGameState[6]\r\n    }\r\n  } catch (e) {\r\n    console.error(e)\r\n    clear('gameState')\r\n  }\r\n\r\n  stageElement.textContent = stageNumber\r\n\r\n  random.setSeed(stageNumber)\r\n\r\n  const cloned = [...wordListFull]\r\n\r\n  const wordCount = 16\r\n\r\n  function simpleJamoBreakdown (word) {\r\n    return [...word.normalize('NFC')].flatMap(decomposeIntoSimple)\r\n  }\r\n\r\n  const wordList = []\r\n  for (let i = 0; i < wordCount; i++) {\r\n    wordList.push(...cloned.splice(randomInt(0, cloned.length - 1), 1))\r\n  }\r\n  cloned.length = 0\r\n\r\n  const wordListElement = document.getElementById('word-list')\r\n  const wordListTemplate = document.getElementById('word-template')\r\n  wordList.forEach(word => {\r\n    const li = wordListTemplate.content.cloneNode(true).querySelector('li')\r\n    li.textContent = word\r\n    li.dataset.word = word\r\n    wordListElement.appendChild(li)\r\n  })\r\n\r\n  const jamoBoardElement = document.getElementById('jamo-board')\r\n  const jamoBoardTemplate = document.getElementById('jamo-template')\r\n\r\n  jamoBoardElement.addEventListener('selectstart', (e) => {\r\n    e.preventDefault()\r\n  })\r\n  let isRightClick = false\r\n  jamoBoardElement.addEventListener('contextmenu', (e) => {\r\n    if (!isRightClick) {\r\n      e.preventDefault()\r\n    }\r\n    isRightClick = false\r\n  })\r\n\r\n  const width = 12\r\n  const height = 12\r\n\r\n  const simpleJamoList = 'ㄱㄴㄷㄹㅁㅂㅅㅇㅈㅊㅋㅌㅍㅎㅏㅑㅓㅕㅗㅛㅜㅠㅡㅣ'\r\n\r\n  function calculateChecksum (gs) {\r\n    return [...gs].map(c => c.charCodeAt()).reduce((acc, val) => ((acc >>> 1) | ((acc & 1) << 15)) ^ val, 0)\r\n  }\r\n\r\n  function serializeGameState () {\r\n    const completions = Array.from(jamoBoardElement.querySelectorAll('.completion-bar')).filter((elem) => elem !== currentJamoCompletion).map(elem => {\r\n      return `${elem.dataset.start},${elem.dataset.end}`\r\n    }).join()\r\n    const gsObject = {\r\n      GAME_VERSION,\r\n      width,\r\n      height,\r\n      completions,\r\n      stageNumber\r\n    }\r\n    const gsJSONString = JSON.stringify(gsObject)\r\n    return `${gsJSONString}|${calculateChecksum(gsJSONString)}`\r\n  }\r\n\r\n  function groupElements (arr, numElements) {\r\n    return arr.reduce((acc, val) => {\r\n      if (!acc.length || acc.at(-1).length === numElements) {\r\n        acc.push([])\r\n      }\r\n      acc.at(-1).push(val)\r\n      return acc\r\n    }, [])\r\n  }\r\n\r\n  function deserializeGameState (gs) {\r\n    if (gs === null) {\r\n      return null\r\n    }\r\n    const [gameVersion, words, width, height, jamoBoard, completions, randomHueBase, stageNumber, checksum] = gs.split('|')\r\n    if (gameVersion * 1 !== GAME_VERSION) {\r\n      throw new Error('The saved game state is from a different version of the game.')\r\n    }\r\n    const expectedChecksum = calculateChecksum(`${gameVersion}|${words}|${width}|${height}|${jamoBoard}|${completions}|${randomHueBase}|${stageNumber}`)\r\n    if (expectedChecksum !== checksum * 1) {\r\n      throw new Error('saved game state is corrupted')\r\n    }\r\n    if (jamoBoard.length !== width * height) {\r\n      throw new Error('saved game state is corrupted')\r\n    }\r\n    return [\r\n      words.split(','),\r\n      width * 1,\r\n      height * 1,\r\n      jamoBoard,\r\n      completions\r\n        ? groupElements(completions.split(',').map(Number), 4)\r\n        : [],\r\n      randomHueBase * 1,\r\n      stageNumber * 1\r\n    ]\r\n  }\r\n\r\n  function decomposeIntoSimple (char) {\r\n    const [nfdCho, nfdJung, nfdJong] = [...char.normalize('NFD')].concat(['', '', '']).slice(0, 3)\r\n    const simpleCho = 'ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ'[nfdCho.charCodeAt(0) - nfdChoBase.charCodeAt(0)]\r\n    const simpleJung = String.fromCharCode(nfdJung.charCodeAt(0) + jungDiff)\r\n    const simpleJong = nfdJong.length ? 'ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ'[nfdJong.charCodeAt(0) - nfdJongBase.charCodeAt(0)] : ''\r\n    return [simpleCho, simpleJung, simpleJong].flatMap(jamo => [...(compositeToSimpleJamoMap[jamo] ?? jamo)])\r\n  }\r\n\r\n  function composeIntoComposite (simpleJamo) { // @TODO: complete this function\r\n    simpleJamo = [...simpleJamo]\r\n    const hangulImeStateMachine = {\r\n      cho: {\r\n        ㄱ: ['ㄱ', 'jung'],\r\n        ㄴㄹㅁㅇㅊㅋㅌㅍㅎ: ['jung'],\r\n        ㄷ: ['ㄷ', 'jung'],\r\n        ㅂ: ['ㅂ', 'jung'],\r\n        ㅅ: ['ㅅ', 'jung'],\r\n        ㅈ: ['ㅈ', 'jung']\r\n      },\r\n      jung: {\r\n        ㅏㅑㅓㅕㅡ: ['ㅣ', 'jong'],\r\n        ㅗ: ['ㅏ', 'ㅣ', 'jong'],\r\n        ㅛㅠㅣ: ['jong'],\r\n        ㅜ: ['ㅓ', 'ㅣ', 'jong']\r\n      },\r\n      jong: {\r\n        ㄱ: ['ㄱ', 'ㅅ', 'cho'],\r\n        ㄴ: ['ㅈ', 'ㅎ', 'cho'],\r\n        ㄷㅁㅇㅈㅊㅋㅌㅍㅎ: ['cho'],\r\n        ㄹ: ['ㄱ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅌ', 'ㅍ', 'ㅎ', 'cho'],\r\n        ㅂ: ['ㅅ', 'cho'],\r\n        ㅅ: ['ㅅ', 'cho']\r\n      }\r\n    }\r\n    const maxLengths = Object.freeze({\r\n      cho: 2,\r\n      jung: 3,\r\n      jong: 2\r\n    })\r\n    const currentLengths = {\r\n      cho: 0,\r\n      jung: 0,\r\n      jong: 0\r\n    }\r\n    // 'ㅂㅂㅜㅓㅣㄹㄱ' -> [['ㅂㅂ'], ['ㅜ','ㅓ','ㅣ'], ['ㄹ', 'ㄱ']]\r\n    let currentState = 'cho'\r\n    const grouped = []\r\n    const group = []\r\n    let nextCandidate = null\r\n    while (simpleJamo[0]) {\r\n      const jamo = simpleJamo.shift() // 'ㅂ'\r\n      group.push(jamo)\r\n      currentLengths[currentState]++\r\n      const transitionOptions = hangulImeStateMachine[currentState] // cho: { ... }\r\n      const transition = Object.entries(transitionOptions).find(([jamoOptions, _]) => jamoOptions.includes(jamo))\r\n      if (!transition) {\r\n        throw new Error('cannot find suitable continuation for jamo sequence')\r\n      }\r\n      const [, targetStates] = transition // ['ㅂ', 'jung']\r\n      if (targetStates.length === 1 || currentLengths[currentState] === maxLengths[currentState]) {\r\n        currentLengths[currentState] = 0\r\n        currentState = targetStates[0]\r\n        grouped.push([...group])\r\n        group.length = 0\r\n        if (nextCandidate && !nextCandidate.includes(jamo)) {\r\n          throw new Error('next candidate mismatch')\r\n        }\r\n        nextCandidate = null\r\n      } else {\r\n        nextCandidate = targetStates.slice(0, -1)\r\n      }\r\n    }\r\n\r\n    return grouped\r\n  }\r\n  if (DEBUG) {\r\n    window.composeIntoComposite = composeIntoComposite\r\n  }\r\n\r\n  const randomJamo = () => {\r\n    return simpleJamoList[randomInt(0, simpleJamoList.length - 1)]\r\n  }\r\n\r\n  const simpleJamoFromWordList = wordList.flatMap(word => [...word.normalize('NFC')].flatMap(decomposeIntoSimple))\r\n  const jamoFromWordList = () => {\r\n    return simpleJamoFromWordList[randomInt(0, simpleJamoFromWordList.length - 1)]\r\n  }\r\n\r\n  const gap = 0.75\r\n\r\n  function noTransitionZone (fn, elem) {\r\n    elem.classList.add('no-transition')\r\n    fn()\r\n    requestAnimationFrame(() => {\r\n      requestAnimationFrame(() => { // 1 frame skip does not work in some cases\r\n        elem.classList.remove('no-transition')\r\n      })\r\n    })\r\n  }\r\n\r\n  const fillJamoBoard = () => {\r\n    jamoBoardElement.style.setProperty('--gap', `${gap}em`)\r\n    jamoBoardElement.style.setProperty('--width', width)\r\n    jamoBoardElement.style.setProperty('--height', height)\r\n\r\n    noTransitionZone(() => {\r\n      for (let i = 0; i < width * height; i++) {\r\n        const jamoElement = jamoBoardTemplate.content.cloneNode(true).querySelector('i')\r\n        const jamo = randomInt(0, 1) ? randomJamo() : jamoFromWordList()\r\n        jamoElement.dataset.jamo = jamo\r\n        jamoBoardElement.appendChild(jamoElement)\r\n      }\r\n    }, jamoBoardElement)\r\n  }\r\n\r\n  fillJamoBoard()\r\n\r\n  const jamoWrittenPositions = Array.from({ length: width * height }, () => null)\r\n\r\n  const getPosition = (x, y, direction, progress) => {\r\n    if (direction < 0 || direction > 7) {\r\n      throw new RangeError('direction must be 0 to 7')\r\n    }\r\n    for (let dy = -1; dy <= 1; dy++) {\r\n      for (let dx = -1; dx <= 1; dx++) {\r\n        if (dirMap[dy + 1][dx + 1] === direction) {\r\n          return [x + dx * progress, y + dy * progress]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const jamoElements = jamoBoardElement.querySelectorAll('#jamo-board>i')\r\n\r\n  jamoElements.forEach((jamoElement, jamoIndex) => {\r\n    jamoElement.dataset.index = jamoIndex\r\n  })\r\n\r\n  /**\r\n   *\r\n   * @param {string} word\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} direction 0 to 7, starting from towards east(right) 1/8 turn CCW each step\r\n   */\r\n  const writeWord = (word, x, y, direction) => {\r\n    const breakdown = simpleJamoBreakdown(word)\r\n    // first check without writing\r\n    if (breakdown.length > width && breakdown.length > height) {\r\n      throw new RangeError('word too long for board')\r\n    }\r\n    for (let i = 0; i < breakdown.length; i++) {\r\n      const [targetX, targetY] = getPosition(x, y, direction, i)\r\n      if (targetX < 0 || targetX >= width || targetY < 0 || targetY >= height) {\r\n        return false\r\n      }\r\n      const jamoIndex = targetY * width + targetX\r\n      const existingJamo = jamoWrittenPositions[jamoIndex]\r\n      if (existingJamo && existingJamo !== breakdown[i]) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < breakdown.length; i++) {\r\n      const [targetX, targetY] = getPosition(x, y, direction, i)\r\n      const jamo = breakdown[i]\r\n      const jamoIndex = targetY * width + targetX\r\n      jamoWrittenPositions[jamoIndex] = jamo\r\n      const jamoElement = jamoElements[jamoIndex]\r\n      jamoElement.dataset.jamo = jamo\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const cellSize = 2\r\n  jamoBoardElement.style.setProperty('--size', `${cellSize}rem`)\r\n\r\n  function memo (key, compute) {\r\n    const cache = memo.cache ?? (memo.cache = new Map())\r\n    if (cache.has(key)) {\r\n      return cache.get(key)\r\n    }\r\n    const result = compute()\r\n    cache.set(key, result)\r\n    return result\r\n  }\r\n\r\n  function createCompletionBarElement (startX, startY, endX, endY, updateElement = null) {\r\n    const completionBarTemplate = memo(createCompletionBarElement, () => document.getElementById('completion-bar-template'))\r\n    const completionBarElement = updateElement ?? completionBarTemplate.content.cloneNode(true).querySelector('.completion-bar')\r\n    const padding = 0.25\r\n\r\n    completionBarElement.dataset.start = `${startX},${startY}`\r\n    completionBarElement.dataset.end = `${endX},${endY}`\r\n\r\n    const sdx = Math.sign(endX - startX)\r\n    const sdy = Math.sign(endY - startY)\r\n    const xMin = Math.min(startX, endX)\r\n    const xMax = Math.max(startX, endX)\r\n    const yMin = Math.min(startY, endY)\r\n    const yMax = Math.max(startY, endY)\r\n    const top = yMin * cellSize + (gap * yMin)\r\n    const left = xMin * cellSize + (gap * xMin)\r\n    const width = (xMax - xMin + 1) * cellSize + (gap * (xMax - xMin))\r\n    const height = (yMax - yMin + 1) * cellSize + (gap * (yMax - yMin))\r\n\r\n    completionBarElement.style.setProperty('--top', `${top}em`)\r\n    completionBarElement.style.setProperty('--left', `${left}em`)\r\n    completionBarElement.style.setProperty('--width', `${width}em`)\r\n    completionBarElement.style.setProperty('--height', `${height}em`)\r\n\r\n    const hypot = Math.hypot(width, height) + padding\r\n    const angle = Math.atan2(sdy * height, sdx * width) * 180 / Math.PI\r\n    completionBarElement.style.setProperty('--thick', `${cellSize + padding}em`)\r\n    completionBarElement.style.setProperty('--hypot', `${hypot}em`)\r\n    completionBarElement.style.setProperty('--angle', `${angle}deg`)\r\n    const randomHue = Math.floor(randomFromCoords(startX, startY) * colorSteps) * Math.floor(360 / colorSteps)\r\n    completionBarElement.style.setProperty('--hue', randomHueBase + randomHue)\r\n\r\n    return completionBarElement\r\n  }\r\n\r\n  let foundWords = 0\r\n\r\n  const stageClearDialog = document.getElementById('stage-clear-dialog')\r\n  const yesButton = stageClearDialog.querySelector('#next-stage')\r\n  const noButton = stageClearDialog.querySelector('#cancel-next-stage')\r\n  yesButton.addEventListener('click', () => {\r\n    stageNumber++\r\n    const currentGameState = serializeGameState()\r\n    const parsed = deserializeGameState(currentGameState)\r\n    parsed[6] = stageNumber\r\n    save('gameState', serializeGameState())\r\n    reset()\r\n  }, { passive: true })\r\n  noButton.addEventListener('click', () => {\r\n    stageClearDialog.close()\r\n  }, { passive: true })\r\n\r\n  function markWordAsFound (wordElement, completionBarElement) {\r\n    foundWords++\r\n    wordElement.style.setProperty('--hue', completionBarElement.style.getPropertyValue('--hue'))\r\n    wordElement.classList.add('found')\r\n    if (foundWords === wordCount) {\r\n      stageClearDialog.showModal()\r\n    }\r\n  }\r\n\r\n  function markCompletionAsCompleted (startX, startY, endX, endY) {\r\n    const completionBarElement = createCompletionBarElement(startX, startY, endX, endY)\r\n    const jamoSequence = completionToJamoSequence(startX, startY, endX, endY)\r\n    const foundWord = findWordByJamoSequence(jamoSequence)\r\n    const wordElement = wordListElement.querySelector(`li[data-word=\"${foundWord}\"]`)\r\n    markWordAsFound(wordElement, completionBarElement)\r\n    jamoBoardElement.appendChild(completionBarElement)\r\n  }\r\n\r\n  function randomInt (min, max) {\r\n    return Math.floor(random.random() * (max - min + 1)) + min\r\n  }\r\n\r\n  const colorSteps = 16\r\n  randomHueBase = randomInt(0, 359)\r\n\r\n  function randomFromCoords (x, y) {\r\n    const dot = x * 12.9898 + y * 78.233\r\n    return (Math.sin(dot) * 43758.5453) % 1\r\n  }\r\n\r\n  const easyDirection = true\r\n\r\n  const numDirections = easyDirection ? 4 : 8\r\n  const directionsProbabilityDist = Array.from({ length: numDirections }, () => wordCount)\r\n  let sum = wordCount * numDirections\r\n\r\n  const getDirection = () => {\r\n    const randomUniform = randomInt(0, sum - 1)\r\n    let temp = 0\r\n    for (let i = 0; i < numDirections; i++) {\r\n      temp += directionsProbabilityDist[i]\r\n      if (randomUniform < temp) {\r\n        return i\r\n      }\r\n    }\r\n  }\r\n\r\n  try {\r\n    wordList.toSorted((a, b) => {\r\n      return simpleJamoBreakdown(b).length - simpleJamoBreakdown(a).length\r\n    }).forEach((word) => {\r\n      let x\r\n      let y\r\n      let direction\r\n      let repeated = 0\r\n      while (true) {\r\n        x = randomInt(0, width - 1)\r\n        y = randomInt(0, height - 1)\r\n        direction = getDirection()\r\n        const directionCorrected = easyDirection ? ((direction + 6) % 8) : direction\r\n        const success = writeWord(word, x, y, directionCorrected)\r\n        if (success) {\r\n          directionsProbabilityDist[direction]--\r\n          sum--\r\n          if (wordCount - directionsProbabilityDist[direction] > wordCount / 3) {\r\n            sum -= directionsProbabilityDist[direction]\r\n            directionsProbabilityDist[direction] = 0\r\n          }\r\n          break\r\n        }\r\n        if (repeated > wordCount ** 2) {\r\n          throw new Error('The board generation was stuck in impossible state, so the page was reloaded.')\r\n        }\r\n        repeated++\r\n      }\r\n    })\r\n  } catch (e) {\r\n    console.error(e)\r\n    reset()\r\n    return\r\n  }\r\n\r\n  if (previousGameState) {\r\n    previousGameState[4].forEach(([startX, startY, endX, endY]) => {\r\n      markCompletionAsCompleted(startX, startY, endX, endY)\r\n    })\r\n  }\r\n\r\n  // add event listener for dark mode toggle\r\n  const darkModeToggleButton = document.getElementById('dark-mode-toggle')\r\n\r\n  const toggleModes = () => {\r\n    const mode = darkModeToggleButton.dataset.mode\r\n    const options = darkModeToggleButton.dataset.modeOptions.split('|')\r\n    const nextMode = options[(options.indexOf(mode) + 1) % options.length]\r\n    const startViewTransition = (change) => document.startViewTransition ? document.startViewTransition(change) : change()\r\n    startViewTransition(() => {\r\n      darkModeToggleButton.dataset.mode = nextMode\r\n      document.documentElement.dataset.mode = nextMode\r\n    })\r\n    localStorage.darkMode = nextMode\r\n  }\r\n  darkModeToggleButton.addEventListener('click', toggleModes, { passive: true })\r\n  const darkMode = localStorage.darkMode\r\n  if (darkMode) {\r\n    noTransitionZone(() => {\r\n      darkModeToggleButton.dataset.mode = darkMode\r\n      document.documentElement.dataset.mode = darkMode\r\n    }, darkModeToggleButton)\r\n  }\r\n\r\n  const pointerdown = new Proxy({ value: false }, {\r\n    set: (target, prop, value) => {\r\n      if (prop === 'value' && typeof value === 'boolean') {\r\n        if (DEBUG) {\r\n          Array.from(jamoBoardElement.querySelectorAll('.start, .mid, .end')).forEach(elem => elem.classList.remove('start', 'mid', 'end'))\r\n        }\r\n        return Reflect.set(target, prop, value)\r\n      }\r\n    }\r\n  })\r\n\r\n  let dragStartPos = [-1, -1]\r\n  let dragDir = -1\r\n  let dragEndPos = [-1, -1]\r\n\r\n  function isOctilinear (origin, target) {\r\n    const [ox, oy] = origin\r\n    const [tx, ty] = target\r\n    const isOrthogonal = ox === tx || oy === ty\r\n    const isDiagonal = Math.abs(ox - tx) === Math.abs(oy - ty)\r\n    if (!(isOrthogonal || isDiagonal)) {\r\n      return -1\r\n    }\r\n    const [dx, dy] = [tx - ox, ty - oy]\r\n    return dirMap[Math.sign(dy) + 1][Math.sign(dx) + 1]\r\n  }\r\n\r\n  function getClosestOctilinearPoint (origin, target, dir) {\r\n    const [ox, oy] = origin\r\n    const [tx, ty] = target\r\n    const [dx, dy] = [tx - ox, ty - oy]\r\n    let [dxO, dyO] = [tx - ox, ty - oy]\r\n    let [dxD, dyD] = [tx - ox, ty - oy]\r\n\r\n    // orthogonal\r\n    if (Math.abs(dxO) < Math.abs(dyO)) {\r\n      dxO = 0\r\n    } else {\r\n      dyO = 0\r\n    }\r\n\r\n    // diagonal\r\n    if ((dxD + dyD) % 2) {\r\n      // parity mismatch adjustment\r\n      if (Math.abs(dxD) < Math.abs(dyD)) {\r\n        dyD -= Math.sign(dyD)\r\n      } else {\r\n        dxD -= Math.sign(dxD)\r\n      }\r\n    }\r\n    {\r\n      const dist = Math.abs(Math.abs(dxD) - Math.abs(dyD)) / 2\r\n      if (Math.abs(dxD) < Math.abs(dyD)) {\r\n        dxD += Math.sign(dxD) * dist\r\n        dyD -= Math.sign(dyD) * dist\r\n      } else {\r\n        dxD -= Math.sign(dxD) * dist\r\n        dyD += Math.sign(dyD) * dist\r\n      }\r\n    }\r\n\r\n    const distO = Math.abs(dx - dxO) + Math.abs(dy - dyO)\r\n    const distD = Math.abs(dx - dxD) + Math.abs(dy - dyD)\r\n\r\n    if (distO === distD) {\r\n      return dir % 2 === 0 ? [ox + dxO, oy + dyO] : [ox + dxD, oy + dyD]\r\n    } else if (distO < distD) {\r\n      return [ox + dxO, oy + dyO]\r\n    } else {\r\n      return [ox + dxD, oy + dyD]\r\n    }\r\n  }\r\n\r\n  let currentJamoCompletion = null\r\n\r\n  function updateJamoCompletion () {\r\n    if (!(dragStartPos[0] !== -1 && dragStartPos[1] !== -1)) {\r\n      return\r\n    }\r\n    const exists = currentJamoCompletion !== null\r\n    const [sx, sy] = dragStartPos\r\n    const [ex, ey] = dragEndPos[0] === -1 && dragEndPos[1] === -1 ? [sx, sy] : dragEndPos\r\n    currentJamoCompletion = createCompletionBarElement(sx, sy, ex, ey, currentJamoCompletion)\r\n    if (!exists) {\r\n      jamoBoardElement.appendChild(currentJamoCompletion)\r\n    }\r\n  }\r\n\r\n  function createRange (start, end) {\r\n    const inc = start < end ? 1 : -1\r\n    const result = []\r\n    for (let i = 0; i <= Math.abs(end - start); i++) {\r\n      result.push(i * inc + start)\r\n    }\r\n    return result\r\n  }\r\n\r\n  function completionToJamoSequence (startX, startY, endX, endY) {\r\n    const rangeX = createRange(startX, endX)\r\n    const rangeY = createRange(startY, endY)\r\n    const longer = Math.max(rangeX.length, rangeY.length)\r\n    const coords = Array.from({ length: longer }, (_, i) => [rangeX[i] ?? startX, rangeY[i] ?? startY])\r\n    return coords.map(([x, y]) => jamoElements[y * width + x].dataset.jamo).join('')\r\n  }\r\n\r\n  function findWordByJamoSequence (jamoSequence) {\r\n    return wordList.find(word => {\r\n      const [simple, reversed] = memo(word, () => {\r\n        const simple = simpleJamoBreakdown(word)\r\n        return [simple.join(''), simple.toReversed().join('')]\r\n      })\r\n      return simple === jamoSequence || reversed === jamoSequence\r\n    })\r\n  }\r\n\r\n  function checkJamoCompletion (jamoCompletionElement) {\r\n    try {\r\n      if (jamoCompletionElement === null) {\r\n        return\r\n      }\r\n      const [startX, startY] = jamoCompletionElement.dataset.start.split(',').map(Number)\r\n      const [endX, endY] = jamoCompletionElement.dataset.end.split(',').map(Number)\r\n      if (startX === endX && startY === endY) {\r\n        jamoCompletionElement.remove()\r\n        return\r\n      }\r\n      const dir = isOctilinear([startX, startY], [endX, endY])\r\n      if (dir === -1) {\r\n        jamoCompletionElement.remove()\r\n        return\r\n      }\r\n      const jamoSequence = completionToJamoSequence(startX, startY, endX, endY)\r\n      const foundWord = findWordByJamoSequence(jamoSequence)\r\n      if (foundWord) {\r\n        const wordElement = wordListElement.querySelector(`li[data-word=\"${foundWord}\"]`)\r\n        if (wordElement) {\r\n          if (wordElement.classList.contains('found')) {\r\n            jamoCompletionElement.remove()\r\n          } else {\r\n            markWordAsFound(wordElement, jamoCompletionElement)\r\n          }\r\n        }\r\n      } else {\r\n        jamoCompletionElement.remove()\r\n      }\r\n    } finally {\r\n      currentJamoCompletion = null\r\n    }\r\n  }\r\n\r\n  jamoBoardElement.addEventListener('pointerdown', (e) => {\r\n    if (!e.target.matches('#jamo-board>i')) {\r\n      return\r\n    }\r\n    pointerdown.value = true\r\n    dragStartPos = calculateCellPosFromCoords(e.clientX, e.clientY)\r\n    dragEndPos = [-1, -1]\r\n    dragDir = -1\r\n    updateJamoCompletion()\r\n  }, { passive: true })\r\n\r\n  document.addEventListener('pointerup', (e) => {\r\n    isRightClick = e.button === 2\r\n    pointerdown.value = false\r\n    if (dragStartPos[0] === dragEndPos[0] && dragStartPos[1] === dragEndPos[1]) {\r\n      currentJamoCompletion?.remove()\r\n      currentJamoCompletion = null\r\n    } else if (dragEndPos[0] !== -1 && dragEndPos[1] !== -1) {\r\n      checkJamoCompletion(currentJamoCompletion)\r\n    }\r\n  }, { passive: true })\r\n\r\n  function calculateOvershoot (value, min, max) {\r\n    if (value < min) {\r\n      return min - value\r\n    }\r\n    if (value > max) {\r\n      return value - max\r\n    }\r\n    return 0\r\n  }\r\n\r\n  function calculateCellSize () {\r\n    const firstElement = jamoElements[0]\r\n    const rightElement = jamoElements[1]\r\n    const bottomElement = jamoElements[width]\r\n    const firstRect = firstElement.getBoundingClientRect()\r\n    const rightRect = rightElement.getBoundingClientRect()\r\n    const bottomRect = bottomElement.getBoundingClientRect()\r\n    const cellInteractiveWidth = rightRect.left - firstRect.left\r\n    const cellInteractiveHeight = bottomRect.top - firstRect.top\r\n    const left = firstRect.left\r\n    const top = firstRect.top\r\n    const gapX = rightRect.left - firstRect.right\r\n    const gapY = bottomRect.top - firstRect.bottom\r\n    return [left, top, cellInteractiveWidth, cellInteractiveHeight, gapX, gapY]\r\n  }\r\n\r\n  function calculateCellPosFromCoords (clientX, clientY) {\r\n    const [left, top, cellWidth, cellHeight, gapX, gapY] = calculateCellSize()\r\n    const boardLeft = left - gapX / 2\r\n    const boardTop = top - gapY / 2\r\n    const [relativeX, relativeY] = [clientX - boardLeft, clientY - boardTop]\r\n    const [cellX, cellY] = [Math.floor(relativeX / cellWidth), Math.floor(relativeY / cellHeight)]\r\n    return [cellX, cellY]\r\n  }\r\n\r\n  function clamp (value, min, max) {\r\n    return Math.min(max, Math.max(min, value))\r\n  }\r\n\r\n  document.addEventListener('pointermove', (e) => {\r\n    if (!pointerdown.value) {\r\n      return\r\n    }\r\n    e.preventDefault()\r\n    const pos = calculateCellPosFromCoords(e.clientX, e.clientY)\r\n    pos[0] = clamp(pos[0], 0, width - 1)\r\n    pos[1] = clamp(pos[1], 0, height - 1)\r\n    if (dragStartPos[0] === pos[0] && dragStartPos[1] === pos[1]) {\r\n      return\r\n    }\r\n    const dir = isOctilinear(dragStartPos, pos)\r\n    if (dir !== -1) {\r\n      dragEndPos = pos\r\n      dragDir = dir\r\n    } else if (dragEndPos[0] !== -1 && dragEndPos[1] !== -1) {\r\n      dragEndPos = getClosestOctilinearPoint(dragStartPos, pos, dragDir)\r\n    }\r\n    if (!(dragEndPos[0] !== -1 && dragEndPos[1] !== -1)) {\r\n      return\r\n    }\r\n    let [cx, cy] = dragEndPos\r\n    if (cx < 0 || cx >= width || cy < 0 || cy >= height) {\r\n      const correctedDragDir = isOctilinear(dragStartPos, [cx, cy])\r\n      const overshootX = calculateOvershoot(cx, 0, width - 1)\r\n      const overshootY = calculateOvershoot(cy, 0, height - 1)\r\n      const maxOvershoot = Math.max(overshootX, overshootY);\r\n      [cx, cy] = getPosition(cx, cy, correctedDragDir, -maxOvershoot)\r\n    }\r\n    dragEndPos = [cx, cy]\r\n\r\n    const closestIndex = dragEndPos[1] * width + dragEndPos[0]\r\n    const closestElement = jamoElements[closestIndex]\r\n    if (DEBUG) {\r\n      jamoBoardElement.querySelector('.end')?.classList.remove('end')\r\n      closestElement.classList.add('end')\r\n    }\r\n    updateJamoCompletion()\r\n  })\r\n\r\n  if (!previousGameState) {\r\n    save('gameState', serializeGameState())\r\n  }\r\n\r\n  window.serializeGameState = serializeGameState\r\n\r\n  const resizeToFit = () => {\r\n    const screenWidth = screen.availWidth\r\n\r\n    wordListElement.style.zoom = 1\r\n    wordListElement.style.fontSize = '1rem'\r\n    jamoBoardElement.style.setProperty('--zoom', 1)\r\n\r\n    const wordListElementWidth = wordListElement.getBoundingClientRect().width\r\n    const jamoBoardElementWidth = jamoBoardElement.getBoundingClientRect().width\r\n\r\n    wordListElement.style.zoom = Math.min(1, screenWidth / wordListElementWidth)\r\n    wordListElement.style.fontSize = `${1 / wordListElement.style.zoom}rem`\r\n    jamoBoardElement.style.setProperty('--zoom', Math.min(1, screenWidth / jamoBoardElementWidth))\r\n  }\r\n  resizeToFit()\r\n  window.addEventListener('resize', resizeToFit, { passive: true })\r\n\r\n  window.addEventListener('beforeunload', () => {\r\n    const beforeunload = load('beforeunload', 0)\r\n    save('beforeunload', beforeunload + 1)\r\n    const currentStateSaved = load('gameState')\r\n    if (currentStateSaved) {\r\n      save('gameState', serializeGameState())\r\n    }\r\n  }, { passive: true })\r\n\r\n  window.addEventListener('pagehide', () => {\r\n    const pagehide = load('pagehide', 0)\r\n    save('pagehide', pagehide + 1)\r\n  }, { passive: true })\r\n\r\n  // @TODO: show relevant image for each word after finding it\r\n  // requestIdleCallback(() => {\r\n  //   // preload images\r\n  //   const imageElements = wordList.map(word => {\r\n  //     const img = document.createElement('img')\r\n  //     img.src = `/images/wordsets/0/${word}.webp`\r\n  //     return img\r\n  //   })\r\n  //   imageElements.forEach(img => img.decode().then(() => {\r\n  //     console.log('decoded', img.src)\r\n  //   }).catch(() => {\r\n  //     console.log('failed to decode', img.src)\r\n  //   }))\r\n  // })\r\n\r\n  const gameInitialized = performance.now()\r\n\r\n  if (PROFILE) {\r\n    requestIdleCallback(() => {\r\n      const settled = performance.now()\r\n\r\n      const t1 = documentParsed - begin // eslint-disable-line no-undef\r\n      const t2 = jsParsed - documentParsed\r\n      const t3 = gameInitialized - jsParsed\r\n      const t4 = settled - gameInitialized\r\n      const t5 = settled - begin // eslint-disable-line no-undef\r\n\r\n      const perfHistory = load('perfHistory', [])\r\n      perfHistory.push([t1, t2, t3, t4, t5])\r\n      save('perfHistory', perfHistory)\r\n    })\r\n  }\r\n}\r\n\r\nfunction reset () {\r\n  const children = [...document.body.children].filter(elem => elem !== document.currentScript)\r\n  children.forEach(child => child.remove())\r\n  document.body.innerHTML = initialHTMLWithoutThisScript\r\n  window.hwgInitialized = false\r\n  init()\r\n}\r\n\r\nfunction load (key, fallback) {\r\n  const data = localStorage[key]\r\n  if (typeof data === 'string') {\r\n    return JSON.parse(data)\r\n  }\r\n  return fallback ?? null\r\n}\r\n\r\nfunction clear (key) {\r\n  delete localStorage[key]\r\n}\r\n\r\nfunction save (key, value) {\r\n  localStorage[key] = JSON.stringify(value)\r\n}\r\n\r\nfunction average (arr) {\r\n  return arr.reduce((acc, val) => acc + val, 0) / arr.length\r\n}\r\nwindow.average = average\r\n\r\nfunction median (arr) {\r\n  const sorted = arr.slice().sort((a, b) => a - b)\r\n  const mid = Math.floor(sorted.length / 2)\r\n  if (sorted.length % 2 === 0) {\r\n    return (sorted[mid - 1] + sorted[mid]) / 2\r\n  }\r\n  return sorted[mid]\r\n}\r\nwindow.median = median\r\n\r\nfunction getCurrentFunctionName () {\r\n  const currentStackRaw = new Error().stack\r\n  const callerLine = currentStackRaw.split('\\n').slice(1)[1]\r\n  return callerLine.match(/at (\\w+)/)[1]\r\n}\r\nwindow.getCurrentFunctionName = getCurrentFunctionName\r\n\r\nconst jsParsed = performance.now()\r\n\r\ninit()\r\n\r\nfunction registerKonamiCodeHandler () {\r\n  const konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a', 'Enter']\r\n  let konamiCodeIndex = 0\r\n  const handler = async (e) => {\r\n    if (e.key === konamiCode[konamiCodeIndex]) {\r\n      konamiCodeIndex++\r\n      if (konamiCodeIndex === konamiCode.length) {\r\n        showCrazyShit()\r\n        window.removeEventListener('keydown', handler)\r\n      }\r\n    } else {\r\n      konamiCodeIndex = 0\r\n    }\r\n  }\r\n  window.addEventListener('keydown', handler, { passive: true })\r\n}\r\nregisterKonamiCodeHandler()\r\n\r\nfunction showCrazyShit () {\r\n  console.log('showing lunatic text')\r\n}\r\n\r\ndocument.getElementById('show-settings-panel').addEventListener('click', () => {\r\n  document.getElementById('settings-panel').showModal()\r\n})\r\n"]}