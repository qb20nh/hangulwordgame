{"version":3,"sources":["src/js.js"],"names":[],"mappings":"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","file":"js.js","sourcesContent":["const documentParsed = performance.now()\r\nlet preventInitCall = false\r\nconst DEBUG = false\r\nconst intervals = []\r\nconst setIntervalWithReset = (fn, ms, ...args) => {\r\n  const id = setInterval(fn, ms, ...args)\r\n  intervals.push(id)\r\n  return id\r\n}\r\nconst GAME_VERSION = 2\r\n\r\nconst scriptHTML = document.currentScript.outerHTML\r\nconst initialHTMLWithoutThisScript = document.body.innerHTML.replace(scriptHTML, '')\r\n\r\nlet wordListFull = `사과\r\n바나나\r\n포도\r\n딸기\r\n오렌지\r\n체리\r\n복숭아\r\n수박\r\n파인애플\r\n배\r\n레몬\r\n라즈베리\r\n블루베리\r\n키위\r\n망고\r\n참외\r\n아보카도\r\n석류\r\n자몽\r\n두리안\r\n코코넛\r\n라임\r\n자두\r\n무화과\r\n감\r\n살구\r\n상추\r\n양파\r\n당근\r\n감자\r\n토마토\r\n오이\r\n시금치\r\n호박\r\n콩\r\n옥수수\r\n파프리카\r\n브로콜리\r\n고구마\r\n아스파라거스\r\n샐러리\r\n양배추\r\n고추\r\n버섯\r\n마늘\r\n생강\r\n비트\r\n콜라비\r\n아티초크\r\n미역\r\n김\r\n호박\r\n피망\r\n죽순\r\n무\r\n고사리\r\n갓\r\n청경채\r\n케일\r\n취나물\r\n치커리\r\n미나리\r\n더덕\r\n토란\r\n귤\r\n대추\r\n파파야\r\n복분자\r\n유자\r\n부추\r\n매실\r\n호두\r\n가지\r\n노각`.split('\\n')\r\n\r\nfunction init() {\r\n  'use strict'\r\n  if (preventInitCall) {\r\n    throw new Error('This function should not be called more than once.')\r\n  }\r\n\r\n  preventInitCall = true\r\n\r\n  \r\n  const dirMap = [\r\n    [3, 2, 1],\r\n    [4, -1, 0],\r\n    [5, 6, 7]\r\n  ]\r\n\r\n\r\n  const [nfdChoBase, nfdJungBase, nfdJongBase] = [...'각'.normalize('NFD')]\r\n  const simpleJungBase = 'ㅏ'\r\n  const jungDiff = simpleJungBase.charCodeAt(0) - nfdJungBase.charCodeAt(0)\r\n\r\n\r\n  const simpleTocompositeJamoMap = {\r\n    'ㄱㄱ': 'ㄲ',\r\n    'ㄱㅅ': 'ㄳ',\r\n    'ㄴㅈ': 'ㄵ',\r\n    'ㄴㅎ': 'ㄶ',\r\n    'ㄷㄷ': 'ㄸ',\r\n    'ㄹㄱ': 'ㄺ',\r\n    'ㄹㅁ': 'ㄻ',\r\n    'ㄹㅂ': 'ㄼ',\r\n    'ㄹㅅ': 'ㄽ',\r\n    'ㄹㅌ': 'ㄾ',\r\n    'ㄹㅍ': 'ㄿ',\r\n    'ㄹㅎ': 'ㅀ',\r\n    'ㅂㅂ': 'ㅃ',\r\n    'ㅂㅅ': 'ㅄ',\r\n    'ㅅㅅ': 'ㅆ',\r\n    'ㅈㅈ': 'ㅉ',\r\n    'ㅏㅣ': 'ㅐ',\r\n    'ㅑㅣ': 'ㅒ',\r\n    'ㅓㅣ': 'ㅔ',\r\n    'ㅕㅣ': 'ㅖ',\r\n    'ㅗㅏ': 'ㅘ',\r\n    'ㅗㅏㅣ': 'ㅙ',\r\n    'ㅗㅣ': 'ㅚ',\r\n    'ㅜㅓ': 'ㅝ',\r\n    'ㅜㅓㅣ': 'ㅞ',\r\n    'ㅜㅣ': 'ㅟ',\r\n    'ㅡㅣ': 'ㅢ'\r\n  }\r\n\r\n  const compositeToSimpleJamoMap = Object.fromEntries(Object.entries(simpleTocompositeJamoMap).map(([simple, composite]) => [composite, simple]))\r\n\r\n  let randomHueBase = -1\r\n  let previousGameState\r\n  try {\r\n    previousGameState = deserializeGameState(load('gameState'))\r\n    if (previousGameState) {\r\n      randomHueBase = previousGameState[5]\r\n    }\r\n  } catch (e) {\r\n    console.error(e)\r\n    clear('gameState')\r\n  }\r\n\r\n  const cloned = [...wordListFull]\r\n\r\n  const wordCount = 16\r\n\r\n  function simpleJamoBreakdown(word) {\r\n    return [...word.normalize('NFC')].flatMap(decomposeIntoSimple)\r\n  }\r\n\r\n  const wordList = previousGameState ? previousGameState[0] : []\r\n  if (!previousGameState) {\r\n    for (let i = 0; i < wordCount; i++) {\r\n      wordList.push(...cloned.splice(randomInt(0, cloned.length - 1), 1))\r\n    }\r\n    cloned.length = 0\r\n  }\r\n\r\n  const wordListElement = document.getElementById('word-list')\r\n  const wordListTemplate = document.getElementById('word-template')\r\n  wordList.forEach(word => {\r\n    const li = wordListTemplate.content.cloneNode(true).querySelector('li')\r\n    li.textContent = word\r\n    li.dataset.word = word\r\n    wordListElement.appendChild(li)\r\n  })\r\n\r\n  const jamoBoardElement = document.getElementById('jamo-board')\r\n  const jamoBoardTemplate = document.getElementById('jamo-template')\r\n\r\n  jamoBoardElement.addEventListener('selectstart', (e) => {\r\n    e.preventDefault()\r\n  })\r\n  let isRightClick = false\r\n  jamoBoardElement.addEventListener('contextmenu', (e) => {\r\n    if (!isRightClick) {\r\n      e.preventDefault()\r\n    }\r\n    isRightClick = false\r\n  })\r\n\r\n\r\n  const width = 12\r\n  const height = 12\r\n\r\n  const simpleJamoList = `ㄱㄴㄷㄹㅁㅂㅅㅇㅈㅊㅋㅌㅍㅎㅏㅑㅓㅕㅗㅛㅜㅠㅡㅣ`\r\n\r\n\r\n  function calculateChecksum(gs) {\r\n    return [...gs].map(c => c.charCodeAt()).reduce((acc, val) => ((acc >>> 1) | ((acc & 1) << 15)) ^ val, 0)\r\n  }\r\n\r\n  function serializeGameState() {\r\n    const words = wordList.join()\r\n    const jamoBoard = Array.from({ length: width * height }, (_, i) => jamoElements[i].textContent).join('')\r\n    const completions = Array.from(jamoBoardElement.querySelectorAll('.completion-bar')).filter((elem) => elem !== currentJamoCompletion).map(elem => {\r\n      return `${elem.dataset.start},${elem.dataset.end}`\r\n    }).join()\r\n    const gs = `${GAME_VERSION}|${words}|${width}|${height}|${jamoBoard}|${completions}|${randomHueBase}`\r\n    return `${gs}|${calculateChecksum(gs)}`\r\n  }\r\n\r\n  function deserializeGameState(gs) {\r\n    if (gs === null) {\r\n      return null\r\n    }\r\n    const [gameVersion, words, width, height, jamoBoard, completions, randomHueBase, checksum] = gs.split('|')\r\n    if (gameVersion * 1 !== GAME_VERSION) {\r\n      throw new Error('The saved game state is from a different version of the game.')\r\n    }\r\n    const expectedChecksum = calculateChecksum(`${gameVersion}|${words}|${width}|${height}|${jamoBoard}|${completions}|${randomHueBase}`)\r\n    if (expectedChecksum !== checksum * 1) {\r\n      throw new Error('saved game state is corrupted')\r\n    }\r\n    if (jamoBoard.length !== width * height) {\r\n      throw new Error('saved game state is corrupted')\r\n    }\r\n    return [\r\n      words.split(','),\r\n      width * 1,\r\n      height * 1,\r\n      jamoBoard,\r\n      completions ? completions.split(',').map(Number).reduce((acc, val) => {\r\n        if (!acc.length || acc.at(-1).length === 4) {\r\n          acc.push([])\r\n        }\r\n        acc.at(-1).push(val)\r\n        return acc\r\n      }, []) : [],\r\n      randomHueBase * 1\r\n    ]\r\n  }\r\n\r\n\r\n  function decomposeIntoSimple(char) {\r\n    const [nfdCho, nfdJung, nfdJong] = [...char.normalize('NFD')].concat(['', '', '']).slice(0, 3)\r\n    const simpleCho = `ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ`[nfdCho.charCodeAt(0) - nfdChoBase.charCodeAt(0)]\r\n    const simpleJung = String.fromCharCode(nfdJung.charCodeAt(0) + jungDiff)\r\n    const simpleJong = nfdJong.length ? `ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ`[nfdJong.charCodeAt(0) - nfdJongBase.charCodeAt(0)] : ''\r\n    return [simpleCho, simpleJung, simpleJong].flatMap(jamo => [...(compositeToSimpleJamoMap[jamo] ?? jamo)])\r\n  }\r\n\r\n  function composeIntoComposite(simpleJamo) { // @TODO: complete this function\r\n    simpleJamo = [...simpleJamo]\r\n    const hangulImeStateMachine = {\r\n      cho: {\r\n        'ㄱ': ['ㄱ', 'jung'],\r\n        'ㄴㄹㅁㅇㅊㅋㅌㅍㅎ': ['jung'],\r\n        'ㄷ': ['ㄷ', 'jung'],\r\n        'ㅂ': ['ㅂ', 'jung'],\r\n        'ㅅ': ['ㅅ', 'jung'],\r\n        'ㅈ': ['ㅈ', 'jung'],\r\n      },\r\n      jung: {\r\n        'ㅏㅑㅓㅕㅡ': ['ㅣ', 'jong'],\r\n        'ㅗ': ['ㅏ', 'ㅣ', 'jong'],\r\n        'ㅛㅠㅣ': ['jong'],\r\n        'ㅜ': ['ㅓ', 'ㅣ', 'jong'],\r\n      },\r\n      jong: {\r\n        'ㄱ': ['ㄱ', 'ㅅ', 'cho'],\r\n        'ㄴ': ['ㅈ', 'ㅎ', 'cho'],\r\n        'ㄷㅁㅇㅈㅊㅋㅌㅍㅎ': ['cho'],\r\n        'ㄹ': ['ㄱ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅌ', 'ㅍ', 'ㅎ', 'cho'],\r\n        'ㅂ': ['ㅅ', 'cho'],\r\n        'ㅅ': ['ㅅ', 'cho'],\r\n      }\r\n    }\r\n    const maxLengths = {\r\n      cho: 2,\r\n      jung: 3,\r\n      jong: 2\r\n    }\r\n    let currentLengths = {\r\n      cho: 0,\r\n      jung: 0,\r\n      jong: 0\r\n    }\r\n    // 'ㅂㅂㅜㅓㅣㄹㄱ' -> [['ㅂㅂ'], ['ㅜ','ㅓ','ㅣ'], ['ㄹ', 'ㄱ']]\r\n    let currentState = 'cho'\r\n    const grouped = []\r\n    const group = []\r\n    let nextCandidate = null\r\n    while (simpleJamo[0]) {\r\n      const jamo = simpleJamo.shift() // 'ㅂ'\r\n      group.push(jamo)\r\n      currentLengths[currentState]++\r\n      const transitionOptions = hangulImeStateMachine[currentState] // cho: { ... }\r\n      const transition = Object.entries(transitionOptions).find(([jamoOptions, _]) => jamoOptions.includes(jamo))\r\n      if (DEBUG) debugger\r\n      if (!transition) {\r\n        throw new Error('cannot find suitable continuation for jamo sequence')\r\n      }\r\n      const [_, targetStates] = transition // ['ㅂ', 'jung']\r\n      if (targetStates.length === 1 || currentLengths[currentState] === maxLengths[currentState]) {\r\n        currentLengths[currentState] = 0\r\n        currentState = targetStates[0]\r\n        grouped.push([...group])\r\n        group.length = 0\r\n        if (nextCandidate && !nextCandidate.includes(jamo)) {\r\n          throw new Error('next candidate mismatch')\r\n        }\r\n        nextCandidate = null\r\n      } else {\r\n        nextCandidate = targetStates.slice(0, -1)\r\n      }\r\n    }\r\n\r\n    return grouped\r\n  }\r\n  if (DEBUG) {\r\n    window.composeIntoComposite = composeIntoComposite\r\n  }\r\n\r\n  const randomJamo = () => {\r\n    return simpleJamoList[randomInt(0, simpleJamoList.length - 1)]\r\n  }\r\n\r\n  const simpleJamoFromWordList = wordList.flatMap(word => [...word.normalize('NFC')].flatMap(decomposeIntoSimple))\r\n  const jamoFromWordlist = () => {\r\n    return simpleJamoFromWordList[randomInt(0, simpleJamoFromWordList.length - 1)]\r\n  }\r\n\r\n  const gap = 0.75\r\n\r\n  function noTransitionZone(fn, elem) {\r\n    elem.classList.add('notransition')\r\n    fn()\r\n    requestAnimationFrame(() => {\r\n      requestAnimationFrame(() => { // 1 frame skip does not work in some cases\r\n        elem.classList.remove('notransition')\r\n      })\r\n    })\r\n  }\r\n\r\n  const fillJamoBoard = () => {\r\n    jamoBoardElement.style.setProperty('--gap', `${gap}em`)\r\n    // set css variable for grid styling\r\n    jamoBoardElement.style.setProperty('--width', width)\r\n    jamoBoardElement.style.setProperty('--height', height)\r\n\r\n    noTransitionZone(() => {\r\n      for (let i = 0; i < width * height; i++) {\r\n        const jamoElement = jamoBoardTemplate.content.cloneNode(true).querySelector('i')\r\n        const jamo = previousGameState ? previousGameState[3][i] : (randomInt(0, 1) ? randomJamo() : jamoFromWordlist())\r\n        jamoElement.textContent = jamo\r\n        jamoBoardElement.appendChild(jamoElement)\r\n      }\r\n    }, jamoBoardElement)\r\n  }\r\n\r\n  fillJamoBoard()\r\n\r\n\r\n  const jamoWrittenPositions = Array.from({ length: width * height }, () => null)\r\n\r\n\r\n  const getPosition = (x, y, direction, progress) => {\r\n    if (direction < 0 || direction > 7) {\r\n      throw new RangeError('direction must be 0 to 7')\r\n    }\r\n    for (let dy = -1; dy <= 1; dy++) {\r\n      for (let dx = -1; dx <= 1; dx++) {\r\n        if (dirMap[dy + 1][dx + 1] === direction) {\r\n          return [x + dx * progress, y + dy * progress]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const jamoElements = jamoBoardElement.querySelectorAll('#jamo-board>i');\r\n\r\n  jamoElements.forEach((jamoElement, jamoIndex) => {\r\n    jamoElement.dataset.index = jamoIndex\r\n  })\r\n\r\n  /**\r\n   * \r\n   * @param {string} word \r\n   * @param {number} x \r\n   * @param {number} y \r\n   * @param {number} direction 0 to 7, starting from towards east(right) 1/8 turn CCW each step\r\n   */\r\n  const writeWord = (word, x, y, direction) => {\r\n    const breakdown = simpleJamoBreakdown(word)\r\n    // first check without writing\r\n    if (breakdown.length > width && breakdown.length > height) {\r\n      throw new RangeError('word too long for board')\r\n    }\r\n    for (let i = 0; i < breakdown.length; i++) {\r\n      const [targetX, targetY] = getPosition(x, y, direction, i)\r\n      if (targetX < 0 || targetX >= width || targetY < 0 || targetY >= height) {\r\n        return false\r\n      }\r\n      const jamoIndex = targetY * width + targetX\r\n      const existingJamo = jamoWrittenPositions[jamoIndex]\r\n      if (existingJamo && existingJamo !== breakdown[i]) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    let startX;\r\n    let startY;\r\n    let endX;\r\n    let endY;\r\n    for (let i = 0; i < breakdown.length; i++) {\r\n      const [targetX, targetY] = getPosition(x, y, direction, i)\r\n      if (i === 0) {\r\n        [startX, startY] = [targetX, targetY]\r\n      }\r\n      if (i === breakdown.length - 1) {\r\n        [endX, endY] = [targetX, targetY]\r\n      }\r\n      const jamo = breakdown[i]\r\n      const jamoIndex = targetY * width + targetX\r\n      jamoWrittenPositions[jamoIndex] = jamo\r\n      const jamoElement = jamoElements[jamoIndex]\r\n      jamoElement.textContent = jamo\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const cellSize = 2\r\n  jamoBoardElement.style.setProperty('--size', `${cellSize}rem`)\r\n\r\n  function memo(key, compute) {\r\n    const cache = memo.cache ?? (memo.cache = new Map())\r\n    if (cache.has(key)) {\r\n      return cache.get(key)\r\n    }\r\n    const result = compute()\r\n    cache.set(key, result)\r\n    return result\r\n  }\r\n\r\n  function createCompletionBarElement(startX, startY, endX, endY, updateElement = null) {\r\n    const completionBarTemplate = memo(createCompletionBarElement, () => document.getElementById('completion-bar-template'))\r\n    const completionBarElement = updateElement ?? completionBarTemplate.content.cloneNode(true).querySelector('.completion-bar')\r\n    const padding = 0.25\r\n\r\n    completionBarElement.dataset.start = `${startX},${startY}`\r\n    completionBarElement.dataset.end = `${endX},${endY}`\r\n\r\n    const sdx = Math.sign(endX - startX)\r\n    const sdy = Math.sign(endY - startY)\r\n    const xmin = Math.min(startX, endX);\r\n    const xmax = Math.max(startX, endX);\r\n    const ymin = Math.min(startY, endY);\r\n    const ymax = Math.max(startY, endY);\r\n    const top = ymin * cellSize + (gap * ymin);\r\n    const left = xmin * cellSize + (gap * xmin);\r\n    const width = (xmax - xmin + 1) * cellSize + (gap * (xmax - xmin));\r\n    const height = (ymax - ymin + 1) * cellSize + (gap * (ymax - ymin));\r\n\r\n    completionBarElement.style.setProperty('--top', `${top}em`)\r\n    completionBarElement.style.setProperty('--left', `${left}em`)\r\n    completionBarElement.style.setProperty('--width', `${width}em`)\r\n    completionBarElement.style.setProperty('--height', `${height}em`)\r\n\r\n    const hypot = Math.hypot(width, height) + padding\r\n    const angle = Math.atan2(sdy * height, sdx * width) * 180 / Math.PI\r\n    completionBarElement.style.setProperty('--thick', `${cellSize + padding}em`)\r\n    completionBarElement.style.setProperty('--hypot', `${hypot}em`)\r\n    completionBarElement.style.setProperty('--angle', `${angle}deg`)\r\n    const rand = Math.floor(randomFromCoords(startX, startY) * colorSteps) * Math.floor(360 / colorSteps)\r\n    const color = `oklch(75% 75% ${randomHueBase + rand}deg)`\r\n    completionBarElement.style.setProperty('--color', color)\r\n\r\n    return completionBarElement\r\n  }\r\n\r\n  let foundWords = 0\r\n\r\n  const stageClearDialog = document.getElementById('stage-clear-dialog')\r\n  const yesButton = stageClearDialog.querySelector('#next-stage')\r\n  const noButton = stageClearDialog.querySelector('#cancel-next-stage')\r\n  yesButton.addEventListener('click', () => {\r\n    clear('gameState')\r\n    reset()\r\n  })\r\n  noButton.addEventListener('click', () => {\r\n    stageClearDialog.close()\r\n  })\r\n\r\n  function markWordAsFound(wordElement, completionBarElement) {\r\n    foundWords++\r\n    wordElement.style.setProperty('--color', completionBarElement.style.getPropertyValue('--color'))\r\n    wordElement.classList.add('found')\r\n    if (foundWords === wordCount) {\r\n      stageClearDialog.showModal()\r\n    }\r\n  }\r\n\r\n  function markCompletionAsCompleted(startX, startY, endX, endY) {\r\n    const completionBarElement = createCompletionBarElement(startX, startY, endX, endY)\r\n    const jamoSequence = completionToJamoSequence(startX, startY, endX, endY)\r\n    const foundWord = findWordByJamoSequence(jamoSequence)\r\n    const wordElement = wordListElement.querySelector(`li[data-word=\"${foundWord}\"]`)\r\n    markWordAsFound(wordElement, completionBarElement)\r\n    jamoBoardElement.appendChild(completionBarElement)\r\n  }\r\n\r\n  function randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min\r\n  }\r\n\r\n  const colorSteps = 16\r\n  if (!previousGameState) {\r\n    randomHueBase = randomInt(0, 359)\r\n  }\r\n\r\n  function randomFromCoords(x, y) {\r\n    const dot = x * 12.9898 + y * 78.233\r\n    return (Math.sin(dot) * 43758.5453) % 1\r\n  }\r\n\r\n  const easyDirection = true\r\n\r\n  const numDirections = easyDirection ? 4 : 8\r\n  const directionsProbabilityDist = Array.from({ length: numDirections }, () => wordCount)\r\n  let sum = wordCount * numDirections\r\n\r\n  const getDirection = () => {\r\n    const randomUniform = randomInt(0, sum - 1)\r\n    let temp = 0\r\n    for (let i = 0; i < numDirections; i++) {\r\n      temp += directionsProbabilityDist[i]\r\n      if (randomUniform < temp) {\r\n        return i\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!previousGameState) {\r\n    try {\r\n      wordList.toSorted((a, b) => {\r\n        return simpleJamoBreakdown(b).length - simpleJamoBreakdown(a).length\r\n      }).forEach((word) => {\r\n        let x\r\n        let y\r\n        let direction\r\n        let repeated = 0\r\n        while (true) {\r\n          x = randomInt(0, width - 1)\r\n          y = randomInt(0, height - 1)\r\n          direction = getDirection()\r\n          const directionCorrected = easyDirection ? ((direction + 6) % 8) : direction\r\n          const success = writeWord(word, x, y, directionCorrected)\r\n          if (success) {\r\n            directionsProbabilityDist[direction]--\r\n            sum--\r\n            if (wordCount - directionsProbabilityDist[direction] > wordCount / 3) {\r\n              sum -= directionsProbabilityDist[direction]\r\n              directionsProbabilityDist[direction] = 0\r\n            }\r\n            break\r\n          }\r\n          if (repeated > wordCount ** 2) {\r\n            throw 'The board generation was stuck in impossible state, so the page was reloaded.'\r\n          }\r\n          repeated++\r\n        }\r\n      })\r\n    } catch (e) {\r\n      console.error(e)\r\n      reset()\r\n      return\r\n    }\r\n  } else {\r\n    previousGameState[4].forEach(([startX, startY, endX, endY]) => {\r\n      markCompletionAsCompleted(startX, startY, endX, endY)\r\n    })\r\n  }\r\n\r\n  // add event listener for dark mode toggle\r\n  const darkModeToggleButton = document.getElementById('dark-mode-toggle')\r\n\r\n  const toggleModes = () => {\r\n    const mode = darkModeToggleButton.dataset.mode\r\n    const options = darkModeToggleButton.dataset.modeOptions.split('|')\r\n    const nextMode = options[(options.indexOf(mode) + 1) % options.length]\r\n    const startViewTransition = (change) => document.startViewTransition ? document.startViewTransition(change) : change()\r\n    startViewTransition(() => {\r\n      darkModeToggleButton.dataset.mode = nextMode\r\n      document.documentElement.dataset.mode = nextMode\r\n    })\r\n    localStorage.darkMode = nextMode\r\n  }\r\n  darkModeToggleButton.addEventListener('click', toggleModes)\r\n  const darkMode = localStorage.darkMode\r\n  if (darkMode) {\r\n    noTransitionZone(() => {\r\n      darkModeToggleButton.dataset.mode = darkMode\r\n      document.documentElement.dataset.mode = darkMode\r\n    }, darkModeToggleButton)\r\n  }\r\n\r\n  const pointerdown = new Proxy({ value: false }, {\r\n    set: (target, prop, value) => {\r\n      if (prop === 'value' && typeof value === 'boolean') {\r\n        if (DEBUG) {\r\n          Array.from(jamoBoardElement.querySelectorAll('.start, .mid, .end')).forEach(elem => elem.classList.remove('start', 'mid', 'end'))\r\n        }\r\n        return Reflect.set(target, prop, value)\r\n      }\r\n    }\r\n  })\r\n  \r\n  let dragStartPos = [-1, -1]\r\n  let dragDir = -1\r\n  let dragEndPos = [-1, -1]\r\n\r\n  function indexToPos(index) {\r\n    return [index % width, Math.floor(index / width)]\r\n  }\r\n\r\n  function isOctilinear(origin, target) {\r\n    const [ox, oy] = origin\r\n    const [tx, ty] = target\r\n    const isOrthogonal = ox === tx || oy === ty\r\n    const isDiagonal = Math.abs(ox - tx) === Math.abs(oy - ty)\r\n    if (!(isOrthogonal || isDiagonal)) {\r\n      return -1\r\n    }\r\n    const [dx, dy] = [tx - ox, ty - oy]\r\n    return dirMap[Math.sign(dy) + 1][Math.sign(dx) + 1]\r\n  }\r\n\r\n  function getClosestOctilinearPoint(origin, target, dir) {\r\n    const [ox, oy] = origin\r\n    const [tx, ty] = target\r\n    const [dx, dy] = [tx - ox, ty - oy]\r\n    let [dx1, dy1] = [tx - ox, ty - oy]\r\n    let [dx2, dy2] = [tx - ox, ty - oy]\r\n\r\n    {\r\n      // orthogonal\r\n      if (Math.abs(dx1) < Math.abs(dy1)) {\r\n        dx1 = 0\r\n      } else {\r\n        dy1 = 0\r\n      }\r\n    }\r\n\r\n    {\r\n      // diagonal\r\n      if ((dx2 + dy2) % 2) {\r\n        // parity mismatch adjustment\r\n        if (Math.abs(dx2) < Math.abs(dy2)) {\r\n          dy2 -= Math.sign(dy2)\r\n        } else {\r\n          dx2 -= Math.sign(dx2)\r\n        }\r\n      }\r\n      let dist = Math.abs(Math.abs(dx2) - Math.abs(dy2)) / 2\r\n      if (Math.abs(dx2) < Math.abs(dy2)) {\r\n        dx2 += Math.sign(dx2) * dist\r\n        dy2 -= Math.sign(dy2) * dist\r\n      } else {\r\n        dx2 -= Math.sign(dx2) * dist\r\n        dy2 += Math.sign(dy2) * dist\r\n      }\r\n    }\r\n\r\n    const dist1 = Math.abs(dx - dx1) + Math.abs(dy - dy1)\r\n    const dist2 = Math.abs(dx - dx2) + Math.abs(dy - dy2)\r\n\r\n    if (dist1 === dist2) {\r\n      if (dir % 2 === 0) {\r\n        return [ox + dx1, oy + dy1]\r\n      } else {\r\n        return [ox + dx2, oy + dy2]\r\n      }\r\n    } else {\r\n      if (dist1 < dist2) {\r\n        return [ox + dx1, oy + dy1]\r\n      } else {\r\n        return [ox + dx2, oy + dy2]\r\n      }\r\n    }\r\n  }\r\n\r\n  let currentJamoCompletion = null\r\n\r\n  function updateJamoCompletion() {\r\n    if (dragStartPos[0] !== -1 && dragStartPos[1] !== -1) {\r\n      const exists = currentJamoCompletion !== null\r\n      const [sx, sy] = dragStartPos\r\n      const [ex, ey] = dragEndPos[0] === -1 && dragEndPos[1] === -1 ? [sx, sy] : dragEndPos\r\n      currentJamoCompletion = createCompletionBarElement(sx, sy, ex, ey, currentJamoCompletion)\r\n      if (!exists) {\r\n        jamoBoardElement.appendChild(currentJamoCompletion)\r\n      }\r\n    }\r\n  }\r\n\r\n  function createRange(start, end) {\r\n    const inc = start < end ? 1 : -1;\r\n    const result = [];\r\n    for (let i = 0; i <= Math.abs(end - start); i += 1) {\r\n      result.push(i * inc + start)\r\n    }\r\n    return result\r\n  }\r\n\r\n  function completionToJamoSequence(startX, startY, endX, endY) {\r\n    const rangeX = createRange(startX, endX)\r\n    const rangeY = createRange(startY, endY)\r\n    const longer = Math.max(rangeX.length, rangeY.length)\r\n    const coords = Array.from({ length: longer }, (_, i) => [rangeX[i] ?? startX, rangeY[i] ?? startY])\r\n    return coords.map(([x, y]) => jamoElements[y * width + x].textContent).join('')\r\n  }\r\n\r\n  function findWordByJamoSequence(jamoSequence) {\r\n    return wordList.find(word => {\r\n      const [simple, reversed] = memo(word, () => {\r\n        const simple = simpleJamoBreakdown(word)\r\n        return [simple.join(''), simple.toReversed().join('')]\r\n      })\r\n      return simple === jamoSequence || reversed === jamoSequence\r\n    })\r\n  }\r\n\r\n  function checkJamoCompletion(jamoCompletionElement) {\r\n    try {\r\n      if (jamoCompletionElement === null) {\r\n        return\r\n      }\r\n      const [startX, startY] = jamoCompletionElement.dataset.start.split(',').map(Number)\r\n      const [endX, endY] = jamoCompletionElement.dataset.end.split(',').map(Number)\r\n      if (startX === endX && startY === endY) {\r\n        jamoCompletionElement.remove()\r\n        return\r\n      }\r\n      const dir = isOctilinear([startX, startY], [endX, endY])\r\n      if (dir === -1) {\r\n        jamoCompletionElement.remove()\r\n        return\r\n      }\r\n      const jamoSequence = completionToJamoSequence(startX, startY, endX, endY)\r\n      const foundWord = findWordByJamoSequence(jamoSequence)\r\n      if (foundWord) {\r\n        const wordElement = wordListElement.querySelector(`li[data-word=\"${foundWord}\"]`)\r\n        if (wordElement) {\r\n          if (wordElement.classList.contains('found')) {\r\n            jamoCompletionElement.remove()\r\n          } else {\r\n            markWordAsFound(wordElement, jamoCompletionElement)\r\n          }\r\n        }\r\n      } else {\r\n        jamoCompletionElement.remove()\r\n      }\r\n    } finally {\r\n      currentJamoCompletion = null\r\n    }\r\n  }\r\n\r\n  jamoBoardElement.addEventListener('pointerdown', (e) => {\r\n    const jamoElement = document.elementFromPoint(e.clientX, e.clientY)\r\n    if (jamoElement.matches('#jamo-board>i')) {\r\n      pointerdown.value = true\r\n      if (DEBUG) {\r\n        jamoElement.classList.add('start')\r\n      }\r\n      dragStartPos = indexToPos(jamoElement.dataset.index * 1)\r\n      dragEndPos = [-1, -1]\r\n      dragDir = -1\r\n      updateJamoCompletion()\r\n    }\r\n  })\r\n\r\n  document.addEventListener('pointerup', (e) => {\r\n    isRightClick = e.button === 2\r\n    pointerdown.value = false\r\n    if (dragEndPos[0] !== -1 && dragEndPos[1] !== -1 && (dragStartPos[0] !== dragEndPos[0] || dragStartPos[1] !== dragEndPos[1])) {\r\n      checkJamoCompletion(currentJamoCompletion)\r\n    }\r\n  })\r\n\r\n  function calculateOvershoot(value, min, max) {\r\n    if (value < min) {\r\n      return min - value\r\n    }\r\n    if (value > max) {\r\n      return value - max\r\n    }\r\n    return 0\r\n  }\r\n\r\n  document.addEventListener('pointermove', (e) => {\r\n    if (pointerdown.value) {\r\n      e.preventDefault()\r\n      const jamoElement = document.elementFromPoint(e.clientX, e.clientY)\r\n      if (jamoElement?.matches('#jamo-board>i')) {\r\n        const pos = indexToPos(jamoElement.dataset.index * 1)\r\n        if (dragStartPos[0] === pos[0] && dragStartPos[1] === pos[1]) {\r\n          return\r\n        }\r\n        if (DEBUG) {\r\n          jamoBoardElement.querySelector('.mid')?.classList.remove('mid')\r\n          jamoElement.classList.add('mid')\r\n        }\r\n        const dir = isOctilinear(dragStartPos, pos)\r\n        if (dir !== -1) {\r\n          dragEndPos = pos\r\n          dragDir = dir\r\n        } else if (dragEndPos[0] !== -1 && dragEndPos[1] !== -1) {\r\n          let [cx, cy] = getClosestOctilinearPoint(dragStartPos, pos, dragDir)\r\n          if (cx < 0 || cx >= width || cy < 0 || cy >= height) {\r\n            const correctedDragDir = isOctilinear(dragStartPos, [cx, cy])\r\n            const overshootX = calculateOvershoot(cx, 0, width - 1)\r\n            const overshootY = calculateOvershoot(cy, 0, height - 1)\r\n            const maxOvershoot = Math.max(overshootX, overshootY);\r\n            [cx, cy] = getPosition(cx, cy, correctedDragDir, -maxOvershoot)\r\n          }\r\n          dragEndPos = [cx, cy]\r\n        }\r\n        if (dragEndPos[0] !== -1 && dragEndPos[1] !== -1) {\r\n          const closestIndex = dragEndPos[1] * width + dragEndPos[0]\r\n          const closestElement = jamoElements[closestIndex]\r\n          if (DEBUG) {\r\n            jamoBoardElement.querySelector('.end')?.classList.remove('end')\r\n            closestElement.classList.add('end')\r\n          }\r\n          updateJamoCompletion()\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  if (!previousGameState) {\r\n    save('gameState', serializeGameState())\r\n  }\r\n\r\n  window.serializeGameState = serializeGameState\r\n\r\n  const mainElement = document.querySelector('main')\r\n\r\n  const resizeToFit = () => {\r\n    const screenWidth = screen.availWidth\r\n    const screenHeight = screen.availHeight\r\n\r\n    wordListElement.style.zoom = 1\r\n    wordListElement.style.fontSize = '1rem'\r\n    jamoBoardElement.style.zoom = 1\r\n    mainElement.style.zoom = 1\r\n\r\n    const wordListElementWidth = wordListElement.getBoundingClientRect().width\r\n    const jamoBoardElementWidth = jamoBoardElement.getBoundingClientRect().width\r\n  \r\n    wordListElement.style.zoom = Math.min(1, screenWidth / wordListElementWidth)\r\n    wordListElement.style.fontSize = `${1 / wordListElement.style.zoom}rem`\r\n    jamoBoardElement.style.zoom = Math.min(1, screenWidth / jamoBoardElementWidth)\r\n  \r\n    const mainElementHeight = mainElement.getBoundingClientRect().height\r\n  \r\n    mainElement.style.zoom = Math.min(1, screenHeight / mainElementHeight)\r\n  }\r\n  resizeToFit()\r\n  window.addEventListener('resize', resizeToFit)\r\n\r\n  window.addEventListener('beforeunload', () => {\r\n    const currentStateSaved = load('gameState')\r\n    if (currentStateSaved) {\r\n      save('gameState', serializeGameState())\r\n    }\r\n  })\r\n\r\n  const gameInitialized = performance.now()\r\n\r\n  const PROFILE = false\r\n  if (PROFILE) {\r\n    requestIdleCallback(() => {\r\n      const settled = performance.now()\r\n\r\n      const t1 = documentParsed - begin\r\n      const t2 = jsParsed - documentParsed\r\n      const t3 = gameInitialized - jsParsed\r\n      const t4 = settled - gameInitialized\r\n      const t5 = settled - begin\r\n      \r\n      const perfHistory = load('perfHistory', [])\r\n      perfHistory.push([t1, t2, t3, t4, t5])\r\n      save('perfHistory', perfHistory)\r\n    })\r\n  }\r\n}\r\n\r\nfunction reset() {\r\n  intervals.forEach(clearInterval)\r\n  intervals.length = 0\r\n  const children = [...document.body.children].filter(elem => elem !== document.currentScript)\r\n  children.forEach(child => child.remove())\r\n  document.body.innerHTML = initialHTMLWithoutThisScript\r\n  preventInitCall = false\r\n  init()\r\n}\r\n\r\nfunction load(key, fallback) {\r\n  const data = localStorage[key]\r\n  if (typeof data === 'string') {\r\n    return JSON.parse(data)\r\n  }\r\n  return fallback ?? null\r\n}\r\n\r\nfunction clear(key) {\r\n  delete localStorage[key]\r\n}\r\n\r\nfunction save(key, value) {\r\n  localStorage[key] = JSON.stringify(value)\r\n}\r\n\r\nfunction average(arr) {\r\n  return arr.reduce((acc, val) => acc + val, 0) / arr.length\r\n}\r\nfunction median(arr) {\r\n  const sorted = arr.slice().sort((a, b) => a - b)\r\n  const mid = Math.floor(sorted.length / 2)\r\n  if (sorted.length % 2 === 0) {\r\n    return (sorted[mid - 1] + sorted[mid]) / 2\r\n  }\r\n  return sorted[mid]\r\n}\r\n\r\nfunction getCurrentFunctionName() {\r\n  const currentStackRaw = new Error().stack\r\n  const callerLine = currentStackRaw.split('\\n').slice(1)[1]\r\n  const caller = callerLine.match(/at (\\w+)/)[1]\r\n  return caller\r\n}\r\n\r\nconst jsParsed = performance.now()\r\n\r\ninit()\r\n\r\nfunction registerKonamiCodeHandler() {\r\n  const konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a', 'Enter']\r\n  let konamiCodeIndex = 0\r\n  const a = async (e) => {\r\n    if (e.key === konamiCode[konamiCodeIndex]) {\r\n      konamiCodeIndex++\r\n      if (konamiCodeIndex === konamiCode.length) {\r\n        showCrazyShit()\r\n        window.removeEventListener('keydown', a)\r\n      }\r\n    } else {\r\n      konamiCodeIndex = 0\r\n    }\r\n  }\r\n  window.addEventListener('keydown', a, {passive: true})\r\n}\r\n\r\nfunction showCrazyShit() {\r\n  const lunaticText = generateLunaticText()\r\n  const lunaticElement = document.createElement('div')\r\n  lunaticElement.textContent = lunaticText\r\n  document.body.appendChild(lunaticElement)\r\n  const slices = createRandomStyleSlices({textLength: lunaticText.length, numSlices: 100, maxLength: 5})\r\n  // compute overlapping slices and splice them so that they don't overlap\r\n  const sliceGroups = slices.reduce((acc, slice) => {\r\n    const last = acc[acc.length - 1]\r\n    if (last && last.some(s => s.start < slice.end && s.end > slice.start)) {\r\n      last.push(slice)\r\n    } else {\r\n      acc.push([slice])\r\n    }\r\n    return acc\r\n  }, [])\r\n\r\n}\r\n\r\ndocument.getElementById('show-settings-panel').addEventListener('click', () => {\r\n  document.getElementById('settings-panel').showModal()\r\n})\r\n"]}