let t=()=>{throw Error("This function should not be called")};function e(e){if(!function(e){let r=e.name;if("string"!=typeof r)return!1;let o=r[Symbol.iterator];if("function [Symbol.iterator]() { [native code] }"!==t.toString.call(o))return!1;for(let t of r)if("	"===t||"\r"===t||"\n"===t||" "===t||"!"===t||'"'===t||"#"===t||"%"===t||"&"===t||"'"===t||"("===t||")"===t||"*"===t||"+"===t||","===t||"-"===t||"."===t||"/"===t||":"===t||";"===t||"<"===t||"="===t||">"===t||"?"===t||"@"===t||"["===t||"\\"===t||"]"===t||"^"===t||"_"===t||"`"===t||"{"===t||"|"===t||"}"===t||"~"===t)return!1;return t.toString.call(e)===`function ${e.name}() { [native code] }`}(e))throw Error(`Function ${e.name} is user-defined and cannot be trusted`)}export function validate(){e(Object),e(Object.getOwnPropertyDescriptors);let t=[];t.push(Object.getOwnPropertyDescriptors(Object));let r=0;for(;r<t.length;){let o=t[r++],n=o.value;"function"==typeof n?e(n):"object"==typeof n?t.push(Object.getOwnPropertyDescriptors(null!=n?n:{})):!0!==o.configurable&&!0!==o.writable&&"function"!=typeof o.set||console.error("Property is not frozen",o)}}

//# sourceMappingURL=integrity_check.js.map